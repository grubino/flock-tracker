{
  "openapi": "3.1.0",
  "info": {
    "title": "Flock Tracker API",
    "description": "\n    ## Flock Tracker API\n\n    A comprehensive API for tracking farm animals, events, and locations.\n\n    ### Features:\n    * **Animal Management**: Track sheep, chickens, and bees with lineage information\n    * **Event Tracking**: Record health events, treatments, breeding, and more\n    * **Location Management**: Manage paddocks and locations with capacity tracking\n    * **Search & Filter**: Powerful search and filtering capabilities\n\n    ### Animal Types:\n    * **Sheep**: Track lineage, health events, and location with gender tracking (ewes/rams)\n    * **Chickens**: Monitor flock health and egg production\n    * **Hives**: Track hive health and honey production\n    ",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Register",
        "description": "Register a new user",
        "operationId": "register_api_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login",
        "description": "Login with email and password",
        "operationId": "login_api_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Read Users Me",
        "description": "Get current user information",
        "operationId": "read_users_me_api_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/auth/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login For Access Token",
        "description": "Login endpoint that returns just the token (for OAuth2 compatibility)",
        "operationId": "login_for_access_token_api_auth_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List Users",
        "description": "List all users (admin only)",
        "operationId": "list_users_api_admin_users_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUserResponse"
                  },
                  "title": "Response List Users Api Admin Users Get"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get User",
        "description": "Get a specific user by ID (admin only)",
        "operationId": "get_user_api_admin_users__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}/role": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Update User Role",
        "description": "Update a user's role (admin only)",
        "operationId": "update_user_role_api_admin_users__user_id__role_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}/reset-password": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Reset User Password",
        "description": "Reset a user's password (admin only)",
        "operationId": "reset_user_password_api_admin_users__user_id__reset_password_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetUserPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}/activate": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Activate User",
        "description": "Activate a user (admin only)",
        "operationId": "activate_user_api_admin_users__user_id__activate_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}/deactivate": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Deactivate User",
        "description": "Deactivate a user (admin only)",
        "operationId": "deactivate_user_api_admin_users__user_id__deactivate_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Read Animals",
        "description": "Get all animals with optional filtering",
        "operationId": "read_animals_api_animals_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of records to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "animal_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AnimalType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by animal type",
              "title": "Animal Type"
            },
            "description": "Filter by animal type"
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by current location",
              "title": "Location Id"
            },
            "description": "Filter by current location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalWithDetails"
                  },
                  "title": "Response Read Animals Api Animals Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "animals"
        ],
        "summary": "Create Animal",
        "description": "Create a new animal",
        "operationId": "create_animal_api_animals_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Animal"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/search": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Search Animals",
        "description": "Search animals by name or tag number",
        "operationId": "search_animals_api_animals_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Search term for name or tag number",
              "title": "Q"
            },
            "description": "Search term for name or tag number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/type/{animal_type}": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Get Animals By Type",
        "description": "Get all animals of a specific type",
        "operationId": "get_animals_by_type_api_animals_type__animal_type__get",
        "parameters": [
          {
            "name": "animal_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnimalType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Animal"
                  },
                  "title": "Response Get Animals By Type Api Animals Type  Animal Type  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/tag/{tag_number}": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Read Animal By Tag",
        "description": "Get animal by tag number",
        "operationId": "read_animal_by_tag_api_animals_tag__tag_number__get",
        "parameters": [
          {
            "name": "tag_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalWithLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{animal_id}": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Read Animal",
        "description": "Get a single animal with all details",
        "operationId": "read_animal_api_animals__animal_id__get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalWithDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "animals"
        ],
        "summary": "Update Animal",
        "description": "Update an existing animal",
        "operationId": "update_animal_api_animals__animal_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Animal"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "animals"
        ],
        "summary": "Delete Animal",
        "description": "Delete an animal",
        "operationId": "delete_animal_api_animals__animal_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{animal_id}/offspring": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Get Animal Offspring",
        "description": "Get all offspring of an animal",
        "operationId": "get_animal_offspring_api_animals__animal_id__offspring_get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Animal"
                  },
                  "title": "Response Get Animal Offspring Api Animals  Animal Id  Offspring Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{animal_id}/move": {
      "post": {
        "tags": [
          "animals"
        ],
        "summary": "Move Animal To Location",
        "description": "Move an animal to a new location",
        "operationId": "move_animal_to_location_api_animals__animal_id__move_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Read Events",
        "description": "Get all events with optional filtering",
        "operationId": "read_events_api_events_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of records to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "animal_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by animal ID",
              "title": "Animal Id"
            },
            "description": "Filter by animal ID"
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by event type",
              "title": "Event Type"
            },
            "description": "Filter by event type"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter events from this date",
              "title": "Start Date"
            },
            "description": "Filter events from this date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter events until this date",
              "title": "End Date"
            },
            "description": "Filter events until this date"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWithAnimal"
                  },
                  "title": "Response Read Events Api Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Create Event",
        "description": "Create a new event",
        "operationId": "create_event_api_events_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/bulk": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Create Bulk Events",
        "description": "Create multiple events at once",
        "operationId": "create_bulk_events_api_events_bulk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventBulkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  },
                  "type": "array",
                  "title": "Response Create Bulk Events Api Events Bulk Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/events/search": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Search Events",
        "description": "Search events by description, notes, medication, or veterinarian",
        "operationId": "search_events_api_events_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Search term for description, notes, medication, or veterinarian",
              "title": "Q"
            },
            "description": "Search term for description, notes, medication, or veterinarian"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/recent": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Recent Events",
        "description": "Get events from the last N days",
        "operationId": "get_recent_events_api_events_recent_get",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to look back",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/upcoming": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Upcoming Events",
        "description": "Get upcoming scheduled events",
        "operationId": "get_upcoming_events_api_events_upcoming_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/events/type/{event_type}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Events By Type",
        "description": "Get all events of a specific type",
        "operationId": "get_events_by_type_api_events_type__event_type__get",
        "parameters": [
          {
            "name": "event_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWithAnimal"
                  },
                  "title": "Response Get Events By Type Api Events Type  Event Type  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/{event_id}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Read Event",
        "description": "Get a single event by ID",
        "operationId": "read_event_api_events__event_id__get",
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWithAnimal"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "summary": "Update Event",
        "description": "Update an existing event",
        "operationId": "update_event_api_events__event_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Delete Event",
        "description": "Delete an event",
        "operationId": "delete_event_api_events__event_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/animal/{animal_id}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Read Events By Animal",
        "description": "Get all events for a specific animal",
        "operationId": "read_events_by_animal_api_events_animal__animal_id__get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  },
                  "title": "Response Read Events By Animal Api Events Animal  Animal Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/animal/{animal_id}/health": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Animal Health Events",
        "description": "Get all health-related events for an animal",
        "operationId": "get_animal_health_events_api_events_animal__animal_id__health_get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  },
                  "title": "Response Get Animal Health Events Api Events Animal  Animal Id  Health Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/animal/{animal_id}/medication": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Animal Medication History",
        "description": "Get medication history for an animal",
        "operationId": "get_animal_medication_history_api_events_animal__animal_id__medication_get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  },
                  "title": "Response Get Animal Medication History Api Events Animal  Animal Id  Medication Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/expenses": {
      "get": {
        "tags": [
          "expenses"
        ],
        "summary": "List Expenses",
        "description": "Get all expenses with optional filtering",
        "operationId": "list_expenses_api_expenses_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of records to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ExpenseCategory"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by expense category",
              "title": "Category"
            },
            "description": "Filter by expense category"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter expenses from this date",
              "title": "Start Date"
            },
            "description": "Filter expenses from this date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter expenses until this date",
              "title": "End Date"
            },
            "description": "Filter expenses until this date"
          },
          {
            "name": "vendor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by vendor name",
              "title": "Vendor"
            },
            "description": "Filter by vendor name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseResponse"
                  },
                  "title": "Response List Expenses Api Expenses Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "expenses"
        ],
        "summary": "Create Expense",
        "description": "Create a new expense with optional line items",
        "operationId": "create_expense_api_expenses_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/expenses/{expense_id}": {
      "get": {
        "tags": [
          "expenses"
        ],
        "summary": "Get Expense",
        "description": "Get a specific expense by ID",
        "operationId": "get_expense_api_expenses__expense_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Expense Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "expenses"
        ],
        "summary": "Update Expense",
        "description": "Update an existing expense and its line items",
        "operationId": "update_expense_api_expenses__expense_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Expense Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "expenses"
        ],
        "summary": "Delete Expense",
        "description": "Delete an expense",
        "operationId": "delete_expense_api_expenses__expense_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Expense Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/vendors": {
      "get": {
        "tags": [
          "vendors"
        ],
        "summary": "List Vendors",
        "description": "Get all vendors with optional filtering",
        "operationId": "list_vendors_api_vendors_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of records to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by vendor name",
              "title": "Search"
            },
            "description": "Search by vendor name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorResponse"
                  },
                  "title": "Response List Vendors Api Vendors Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vendors"
        ],
        "summary": "Create Vendor",
        "description": "Create a new vendor",
        "operationId": "create_vendor_api_vendors_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/vendors/{vendor_id}": {
      "get": {
        "tags": [
          "vendors"
        ],
        "summary": "Get Vendor",
        "description": "Get a specific vendor by ID",
        "operationId": "get_vendor_api_vendors__vendor_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vendors"
        ],
        "summary": "Update Vendor",
        "description": "Update an existing vendor",
        "operationId": "update_vendor_api_vendors__vendor_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vendors"
        ],
        "summary": "Delete Vendor",
        "description": "Delete a vendor",
        "operationId": "delete_vendor_api_vendors__vendor_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/receipts/upload": {
      "post": {
        "tags": [
          "receipts"
        ],
        "summary": "Upload Receipt",
        "description": "Upload a receipt image or PDF for OCR processing",
        "operationId": "upload_receipt_api_receipts_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_receipt_api_receipts_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/receipts/{receipt_id}/process": {
      "post": {
        "tags": [
          "receipts"
        ],
        "summary": "Process Receipt",
        "description": "Process a receipt with OCR and extract structured data (async with Celery)",
        "operationId": "process_receipt_api_receipts__receipt_id__process_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "receipt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Receipt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/receipts/task/{task_id}": {
      "get": {
        "tags": [
          "receipts"
        ],
        "summary": "Get Task Status",
        "description": "Check the status of an OCR processing task",
        "operationId": "get_task_status_api_receipts_task__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/receipts/": {
      "get": {
        "tags": [
          "receipts"
        ],
        "summary": "Get Receipts",
        "description": "Get all receipts",
        "operationId": "get_receipts_api_receipts__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReceiptResponse"
                  },
                  "title": "Response Get Receipts Api Receipts  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/receipts/{receipt_id}": {
      "get": {
        "tags": [
          "receipts"
        ],
        "summary": "Get Receipt",
        "description": "Get a specific receipt",
        "operationId": "get_receipt_api_receipts__receipt_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "receipt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Receipt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "receipts"
        ],
        "summary": "Delete Receipt",
        "description": "Delete a receipt and its file",
        "operationId": "delete_receipt_api_receipts__receipt_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "receipt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Receipt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Read Locations",
        "description": "Get all locations",
        "operationId": "read_locations_api_locations_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of records to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of records to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  },
                  "title": "Response Read Locations Api Locations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Create Location",
        "description": "Create a new location",
        "operationId": "create_location_api_locations_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/search": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Search Locations",
        "description": "Search locations by name, paddock name, or address",
        "operationId": "search_locations_api_locations_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Search term for name, paddock, or address",
              "title": "Q"
            },
            "description": "Search term for name, paddock, or address"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/occupancy": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get Locations Occupancy",
        "description": "Get occupancy information for all locations",
        "operationId": "get_locations_occupancy_api_locations_occupancy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/locations/available": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get Available Locations",
        "description": "Get locations that have available space",
        "operationId": "get_available_locations_api_locations_available_get",
        "parameters": [
          {
            "name": "minimum_space",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Minimum available space required",
              "default": 1,
              "title": "Minimum Space"
            },
            "description": "Minimum available space required"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Read Location",
        "description": "Get a single location with animals",
        "operationId": "read_location_api_locations__location_id__get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationWithAnimals"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "locations"
        ],
        "summary": "Update Location",
        "description": "Update an existing location",
        "operationId": "update_location_api_locations__location_id__put",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "summary": "Delete Location",
        "description": "Delete a location",
        "operationId": "delete_location_api_locations__location_id__delete",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/animals": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get Animals At Location",
        "description": "Get all animals currently at a specific location",
        "operationId": "get_animals_at_location_api_locations__location_id__animals_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Animal"
                  },
                  "title": "Response Get Animals At Location Api Locations  Location Id  Animals Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/occupancy": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get Location Occupancy",
        "description": "Get occupancy information for a specific location",
        "operationId": "get_location_occupancy_api_locations__location_id__occupancy_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/move-animals": {
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Move Animals Between Locations",
        "description": "Move multiple animals from one location to another",
        "operationId": "move_animals_between_locations_api_locations_move_animals_post",
        "parameters": [
          {
            "name": "from_location_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "From Location Id"
            }
          },
          {
            "name": "to_location_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "To Location Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Animal Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/photographs/upload/{animal_id}": {
      "post": {
        "tags": [
          "photographs"
        ],
        "summary": "Upload Photograph",
        "description": "Upload a photograph for an animal",
        "operationId": "upload_photograph_api_photographs_upload__animal_id__post",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_photograph_api_photographs_upload__animal_id__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotographUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/photographs/animal/{animal_id}": {
      "get": {
        "tags": [
          "photographs"
        ],
        "summary": "Get Animal Photographs",
        "description": "Get all photographs for an animal",
        "operationId": "get_animal_photographs_api_photographs_animal__animal_id__get",
        "parameters": [
          {
            "name": "animal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Animal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Photograph"
                  },
                  "title": "Response Get Animal Photographs Api Photographs Animal  Animal Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/photographs/{photograph_id}": {
      "get": {
        "tags": [
          "photographs"
        ],
        "summary": "Get Photograph",
        "description": "Get a specific photograph",
        "operationId": "get_photograph_api_photographs__photograph_id__get",
        "parameters": [
          {
            "name": "photograph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Photograph Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Photograph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "photographs"
        ],
        "summary": "Update Photograph",
        "description": "Update photograph metadata",
        "operationId": "update_photograph_api_photographs__photograph_id__put",
        "parameters": [
          {
            "name": "photograph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Photograph Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhotographUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Photograph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "photographs"
        ],
        "summary": "Delete Photograph",
        "description": "Delete a photograph",
        "operationId": "delete_photograph_api_photographs__photograph_id__delete",
        "parameters": [
          {
            "name": "photograph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Photograph Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/photographs/{photograph_id}/file": {
      "get": {
        "tags": [
          "photographs"
        ],
        "summary": "Get Photograph File",
        "description": "Serve the actual image file",
        "operationId": "get_photograph_file_api_photographs__photograph_id__file_get",
        "parameters": [
          {
            "name": "photograph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Photograph Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/photographs/{photograph_id}/set-primary": {
      "post": {
        "tags": [
          "photographs"
        ],
        "summary": "Set Primary Photograph",
        "description": "Set a photograph as the primary photo for an animal",
        "operationId": "set_primary_photograph_api_photographs__photograph_id__set_primary_post",
        "parameters": [
          {
            "name": "photograph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Photograph Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "API Info"
        ],
        "summary": "Api Info",
        "description": "API information endpoint",
        "operationId": "api_info_api_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Frontend"
        ],
        "summary": "Serve Frontend",
        "description": "Serve the React frontend",
        "operationId": "serve_frontend__get",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/{full_path}": {
      "get": {
        "tags": [
          "Frontend"
        ],
        "summary": "Serve Spa",
        "description": "Serve React app for all non-API routes (SPA routing)",
        "operationId": "serve_spa__full_path__get",
        "parameters": [
          {
            "name": "full_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Full Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminUserResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "role",
          "provider",
          "is_active",
          "is_verified"
        ],
        "title": "AdminUserResponse"
      },
      "Animal": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "type": "string",
            "title": "Tag Number",
            "description": "Unique tag number for the animal"
          },
          "animal_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnimalType"
              }
            ],
            "description": "Type of animal (sheep, chicken, hive)"
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ],
            "description": "Gender for sheep (ewe or ram)"
          },
          "birth_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birth Date"
          },
          "current_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Location Id"
          },
          "sire_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sire Id"
          },
          "dam_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dam Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "tag_number",
          "animal_type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Animal",
        "description": "Schema for returning animal data"
      },
      "AnimalBrief": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "type": "string",
            "title": "Tag Number"
          },
          "animal_type": {
            "$ref": "#/components/schemas/AnimalType"
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "tag_number",
          "animal_type"
        ],
        "title": "AnimalBrief",
        "description": "Brief animal info for nested responses"
      },
      "AnimalCreate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "type": "string",
            "title": "Tag Number",
            "description": "Unique tag number for the animal"
          },
          "animal_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnimalType"
              }
            ],
            "description": "Type of animal (sheep, chicken, hive)"
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ],
            "description": "Gender for sheep (ewe or ram)"
          },
          "birth_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birth Date"
          },
          "current_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Location Id"
          },
          "sire_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sire Id"
          },
          "dam_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dam Id"
          }
        },
        "type": "object",
        "required": [
          "tag_number",
          "animal_type"
        ],
        "title": "AnimalCreate",
        "description": "Schema for creating a new animal"
      },
      "AnimalType": {
        "type": "string",
        "enum": [
          "sheep",
          "chicken",
          "hive"
        ],
        "title": "AnimalType"
      },
      "AnimalUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag Number"
          },
          "animal_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnimalType"
              },
              {
                "type": "null"
              }
            ]
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ]
          },
          "birth_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birth Date"
          },
          "current_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Location Id"
          },
          "sire_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sire Id"
          },
          "dam_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dam Id"
          }
        },
        "type": "object",
        "title": "AnimalUpdate",
        "description": "Schema for updating an existing animal"
      },
      "AnimalWithDetails": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "type": "string",
            "title": "Tag Number",
            "description": "Unique tag number for the animal"
          },
          "animal_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnimalType"
              }
            ],
            "description": "Type of animal (sheep, chicken, hive)"
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ],
            "description": "Gender for sheep (ewe or ram)"
          },
          "birth_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birth Date"
          },
          "current_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Location Id"
          },
          "sire_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sire Id"
          },
          "dam_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dam Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "current_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocationBrief"
              },
              {
                "type": "null"
              }
            ]
          },
          "sire": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnimalBrief"
              },
              {
                "type": "null"
              }
            ]
          },
          "dam": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnimalBrief"
              },
              {
                "type": "null"
              }
            ]
          },
          "photographs": {
            "items": {
              "$ref": "#/components/schemas/PhotographBrief"
            },
            "type": "array",
            "title": "Photographs",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "tag_number",
          "animal_type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "AnimalWithDetails",
        "description": "Schema for animal with all related data"
      },
      "AnimalWithLocation": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tag_number": {
            "type": "string",
            "title": "Tag Number",
            "description": "Unique tag number for the animal"
          },
          "animal_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnimalType"
              }
            ],
            "description": "Type of animal (sheep, chicken, hive)"
          },
          "sheep_gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SheepGender"
              },
              {
                "type": "null"
              }
            ],
            "description": "Gender for sheep (ewe or ram)"
          },
          "birth_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birth Date"
          },
          "current_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Location Id"
          },
          "sire_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sire Id"
          },
          "dam_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dam Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "current_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocationBrief"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "tag_number",
          "animal_type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "AnimalWithLocation",
        "description": "Schema for animal with location information"
      },
      "AuthResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "user",
          "token"
        ],
        "title": "AuthResponse"
      },
      "Body_upload_photograph_api_photographs_upload__animal_id__post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "caption": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Caption"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_photograph_api_photographs_upload__animal_id__post"
      },
      "Body_upload_receipt_api_receipts_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_receipt_api_receipts_upload_post"
      },
      "Event": {
        "properties": {
          "animal_id": {
            "type": "integer",
            "title": "Animal Id",
            "description": "ID of the animal this event relates to"
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ],
            "description": "Type of event"
          },
          "event_date": {
            "type": "string",
            "format": "date-time",
            "title": "Event Date",
            "description": "Date and time when the event occurred"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the event"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes about the event"
          },
          "medication_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medication Name",
            "description": "Name of medication (for medication events)"
          },
          "dosage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dosage",
            "description": "Dosage administered"
          },
          "veterinarian": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veterinarian",
            "description": "Veterinarian who performed the procedure"
          },
          "cost": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "description": "Cost of the treatment/procedure"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "animal_id",
          "event_type",
          "event_date",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Event",
        "description": "Schema for returning event data"
      },
      "EventBulkCreate": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/EventCreate"
            },
            "type": "array",
            "title": "Events",
            "description": "List of events to create"
          }
        },
        "type": "object",
        "required": [
          "events"
        ],
        "title": "EventBulkCreate",
        "description": "Schema for creating multiple events at once"
      },
      "EventCreate": {
        "properties": {
          "animal_id": {
            "type": "integer",
            "title": "Animal Id",
            "description": "ID of the animal this event relates to"
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ],
            "description": "Type of event"
          },
          "event_date": {
            "type": "string",
            "format": "date-time",
            "title": "Event Date",
            "description": "Date and time when the event occurred"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the event"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes about the event"
          },
          "medication_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medication Name",
            "description": "Name of medication (for medication events)"
          },
          "dosage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dosage",
            "description": "Dosage administered"
          },
          "veterinarian": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veterinarian",
            "description": "Veterinarian who performed the procedure"
          },
          "cost": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "description": "Cost of the treatment/procedure"
          }
        },
        "type": "object",
        "required": [
          "animal_id",
          "event_type",
          "event_date"
        ],
        "title": "EventCreate",
        "description": "Schema for creating a new event"
      },
      "EventType": {
        "type": "string",
        "enum": [
          "deworming",
          "delicing",
          "mite_treatment",
          "lambing",
          "health_check",
          "medication",
          "breeding",
          "birth",
          "death",
          "injury",
          "treatment",
          "other"
        ],
        "title": "EventType"
      },
      "EventUpdate": {
        "properties": {
          "animal_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Animal Id"
          },
          "event_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EventType"
              },
              {
                "type": "null"
              }
            ]
          },
          "event_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Date"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "medication_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medication Name"
          },
          "dosage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dosage"
          },
          "veterinarian": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veterinarian"
          },
          "cost": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          }
        },
        "type": "object",
        "title": "EventUpdate",
        "description": "Schema for updating an existing event"
      },
      "EventWithAnimal": {
        "properties": {
          "animal_id": {
            "type": "integer",
            "title": "Animal Id",
            "description": "ID of the animal this event relates to"
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ],
            "description": "Type of event"
          },
          "event_date": {
            "type": "string",
            "format": "date-time",
            "title": "Event Date",
            "description": "Date and time when the event occurred"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the event"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes about the event"
          },
          "medication_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medication Name",
            "description": "Name of medication (for medication events)"
          },
          "dosage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dosage",
            "description": "Dosage administered"
          },
          "veterinarian": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veterinarian",
            "description": "Veterinarian who performed the procedure"
          },
          "cost": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "description": "Cost of the treatment/procedure"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "animal_id",
          "event_type",
          "event_date",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "EventWithAnimal",
        "description": "Schema for event with animal information"
      },
      "ExpenseCategory": {
        "type": "string",
        "enum": [
          "feed",
          "seed",
          "medication",
          "veterinary",
          "infrastructure",
          "equipment",
          "supplies",
          "utilities",
          "labor",
          "maintenance",
          "other"
        ],
        "title": "ExpenseCategory"
      },
      "ExpenseCreate": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ExpenseCategory"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "expense_date": {
            "type": "string",
            "format": "date-time",
            "title": "Expense Date"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "receipt_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt Id"
          },
          "line_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ExpenseLineItemCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line Items",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "category",
          "amount",
          "description",
          "expense_date"
        ],
        "title": "ExpenseCreate"
      },
      "ExpenseLineItemCreate": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description"
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ]
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Price"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          }
        },
        "type": "object",
        "required": [
          "description",
          "amount"
        ],
        "title": "ExpenseLineItemCreate"
      },
      "ExpenseLineItemResponse": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description"
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ]
          },
          "quantity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit_price": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Price"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "description",
          "amount",
          "id"
        ],
        "title": "ExpenseLineItemResponse"
      },
      "ExpenseResponse": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ExpenseCategory"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "expense_date": {
            "type": "string",
            "format": "date-time",
            "title": "Expense Date"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "receipt_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "vendor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VendorResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "receipt": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReceiptBrief"
              },
              {
                "type": "null"
              }
            ]
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/ExpenseLineItemResponse"
            },
            "type": "array",
            "title": "Line Items",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "category",
          "amount",
          "description",
          "expense_date",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "ExpenseResponse"
      },
      "ExpenseUpdate": {
        "properties": {
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ],
                "gt": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "expense_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expense Date"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "receipt_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt Id"
          },
          "line_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ExpenseLineItemCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line Items"
          }
        },
        "type": "object",
        "title": "ExpenseUpdate"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Location": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the location"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address",
            "description": "Physical address of the location"
          },
          "paddock_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paddock Name",
            "description": "Name of the paddock/field"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the location"
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude",
            "description": "Longitude coordinate"
          },
          "area_size": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Size",
            "description": "Size of the area"
          },
          "area_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Unit",
            "description": "Unit of area measurement (acres, hectares, etc.)"
          },
          "capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capacity",
            "description": "Maximum number of animals this location can hold"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Location",
        "description": "Schema for returning location data"
      },
      "LocationBrief": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "paddock_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paddock Name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "LocationBrief",
        "description": "Brief location info for nested responses"
      },
      "LocationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the location"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address",
            "description": "Physical address of the location"
          },
          "paddock_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paddock Name",
            "description": "Name of the paddock/field"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the location"
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude",
            "description": "Longitude coordinate"
          },
          "area_size": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Size",
            "description": "Size of the area"
          },
          "area_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Unit",
            "description": "Unit of area measurement (acres, hectares, etc.)"
          },
          "capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capacity",
            "description": "Maximum number of animals this location can hold"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "LocationCreate",
        "description": "Schema for creating a new location"
      },
      "LocationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "paddock_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paddock Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude"
          },
          "area_size": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Size"
          },
          "area_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Unit"
          },
          "capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capacity"
          }
        },
        "type": "object",
        "title": "LocationUpdate",
        "description": "Schema for updating an existing location"
      },
      "LocationWithAnimals": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the location"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address",
            "description": "Physical address of the location"
          },
          "paddock_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paddock Name",
            "description": "Name of the paddock/field"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the location"
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude",
            "description": "Longitude coordinate"
          },
          "area_size": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Size",
            "description": "Size of the area"
          },
          "area_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Area Unit",
            "description": "Unit of area measurement (acres, hectares, etc.)"
          },
          "capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capacity",
            "description": "Maximum number of animals this location can hold"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "LocationWithAnimals",
        "description": "Schema for location with current animals"
      },
      "Photograph": {
        "properties": {
          "animal_id": {
            "type": "integer",
            "title": "Animal Id",
            "description": "ID of the animal this photograph belongs to"
          },
          "caption": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Caption",
            "description": "Caption for the photograph"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the photograph"
          },
          "date_taken": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Taken",
            "description": "Date when the photograph was taken"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary",
            "description": "Whether this is the primary photo for the animal",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "original_filename": {
            "type": "string",
            "title": "Original Filename"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "file_size": {
            "type": "integer",
            "title": "File Size"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "animal_id",
          "id",
          "filename",
          "original_filename",
          "file_path",
          "file_size",
          "mime_type",
          "created_at",
          "updated_at"
        ],
        "title": "Photograph",
        "description": "Schema for returning photograph data"
      },
      "PhotographBrief": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "caption": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Caption"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          }
        },
        "type": "object",
        "required": [
          "id",
          "filename",
          "file_path",
          "is_primary"
        ],
        "title": "PhotographBrief",
        "description": "Brief photograph info for nested responses"
      },
      "PhotographUpdate": {
        "properties": {
          "caption": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Caption"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "date_taken": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Taken"
          },
          "is_primary": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Primary"
          }
        },
        "type": "object",
        "title": "PhotographUpdate",
        "description": "Schema for updating photograph metadata"
      },
      "PhotographUploadResponse": {
        "properties": {
          "photograph": {
            "$ref": "#/components/schemas/Photograph"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Photograph uploaded successfully"
          }
        },
        "type": "object",
        "required": [
          "photograph"
        ],
        "title": "PhotographUploadResponse",
        "description": "Response schema for photograph upload"
      },
      "ReceiptBrief": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          }
        },
        "type": "object",
        "required": [
          "id",
          "filename",
          "file_path"
        ],
        "title": "ReceiptBrief"
      },
      "ReceiptResponse": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "file_type": {
            "type": "string",
            "title": "File Type"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "raw_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Text"
          },
          "extracted_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extracted Data"
          },
          "expense_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expense Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "file_type",
          "id",
          "file_path",
          "created_at",
          "updated_at"
        ],
        "title": "ReceiptResponse"
      },
      "ResetUserPassword": {
        "properties": {
          "new_password": {
            "type": "string",
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "new_password"
        ],
        "title": "ResetUserPassword"
      },
      "SheepGender": {
        "type": "string",
        "enum": [
          "ewe",
          "ram"
        ],
        "title": "SheepGender"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token"
      },
      "UpdateUserRole": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "UpdateUserRole"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "default": "customer"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "name",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserLogin": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserLogin"
      },
      "UserResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "default": "customer"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "name",
          "id",
          "provider",
          "is_active",
          "is_verified",
          "created_at",
          "updated_at"
        ],
        "title": "UserResponse"
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "customer",
          "user",
          "admin"
        ],
        "title": "UserRole"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VendorCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "VendorCreate"
      },
      "VendorResponse": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "VendorResponse"
      },
      "VendorUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website"
          }
        },
        "type": "object",
        "title": "VendorUpdate"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
