/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register a new user
         */
        post: operations["register_api_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login with email and password
         */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Users Me
         * @description Get current user information
         */
        get: operations["read_users_me_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login For Access Token
         * @description Login endpoint that returns just the token (for OAuth2 compatibility)
         */
        post: operations["login_for_access_token_api_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List all users (admin only)
         */
        get: operations["list_users_api_admin_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get a specific user by ID (admin only)
         */
        get: operations["get_user_api_admin_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Role
         * @description Update a user's role (admin only)
         */
        patch: operations["update_user_role_api_admin_users__user_id__role_patch"];
        trace?: never;
    };
    "/api/admin/users/{user_id}/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset User Password
         * @description Reset a user's password (admin only)
         */
        post: operations["reset_user_password_api_admin_users__user_id__reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Activate User
         * @description Activate a user (admin only)
         */
        patch: operations["activate_user_api_admin_users__user_id__activate_patch"];
        trace?: never;
    };
    "/api/admin/users/{user_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate User
         * @description Deactivate a user (admin only)
         */
        patch: operations["deactivate_user_api_admin_users__user_id__deactivate_patch"];
        trace?: never;
    };
    "/api/animals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Animals
         * @description Get all animals with optional filtering
         */
        get: operations["read_animals_api_animals_get"];
        put?: never;
        /**
         * Create Animal
         * @description Create a new animal
         */
        post: operations["create_animal_api_animals_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Animals
         * @description Search animals by name or tag number
         */
        get: operations["search_animals_api_animals_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/type/{animal_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animals By Type
         * @description Get all animals of a specific type
         */
        get: operations["get_animals_by_type_api_animals_type__animal_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/tag/{tag_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Animal By Tag
         * @description Get animal by tag number
         */
        get: operations["read_animal_by_tag_api_animals_tag__tag_number__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/{animal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Animal
         * @description Get a single animal with all details
         */
        get: operations["read_animal_api_animals__animal_id__get"];
        /**
         * Update Animal
         * @description Update an existing animal
         */
        put: operations["update_animal_api_animals__animal_id__put"];
        post?: never;
        /**
         * Delete Animal
         * @description Delete an animal
         */
        delete: operations["delete_animal_api_animals__animal_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/{animal_id}/offspring": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animal Offspring
         * @description Get all offspring of an animal
         */
        get: operations["get_animal_offspring_api_animals__animal_id__offspring_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animals/{animal_id}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move Animal To Location
         * @description Move an animal to a new location
         */
        post: operations["move_animal_to_location_api_animals__animal_id__move_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Events
         * @description Get all events with optional filtering
         */
        get: operations["read_events_api_events_get"];
        put?: never;
        /**
         * Create Event
         * @description Create a new event
         */
        post: operations["create_event_api_events_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Bulk Events
         * @description Create multiple events at once
         */
        post: operations["create_bulk_events_api_events_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Events
         * @description Search events by description, notes, medication, or veterinarian
         */
        get: operations["search_events_api_events_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Events
         * @description Get events from the last N days
         */
        get: operations["get_recent_events_api_events_recent_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Upcoming Events
         * @description Get upcoming scheduled events
         */
        get: operations["get_upcoming_events_api_events_upcoming_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/type/{event_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Events By Type
         * @description Get all events of a specific type
         */
        get: operations["get_events_by_type_api_events_type__event_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Event
         * @description Get a single event by ID
         */
        get: operations["read_event_api_events__event_id__get"];
        /**
         * Update Event
         * @description Update an existing event
         */
        put: operations["update_event_api_events__event_id__put"];
        post?: never;
        /**
         * Delete Event
         * @description Delete an event
         */
        delete: operations["delete_event_api_events__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/animal/{animal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Events By Animal
         * @description Get all events for a specific animal
         */
        get: operations["read_events_by_animal_api_events_animal__animal_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/animal/{animal_id}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animal Health Events
         * @description Get all health-related events for an animal
         */
        get: operations["get_animal_health_events_api_events_animal__animal_id__health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/animal/{animal_id}/medication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animal Medication History
         * @description Get medication history for an animal
         */
        get: operations["get_animal_medication_history_api_events_animal__animal_id__medication_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/expenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Expenses
         * @description Get all expenses with optional filtering
         */
        get: operations["list_expenses_api_expenses_get"];
        put?: never;
        /**
         * Create Expense
         * @description Create a new expense
         */
        post: operations["create_expense_api_expenses_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/expenses/{expense_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Expense
         * @description Get a specific expense by ID
         */
        get: operations["get_expense_api_expenses__expense_id__get"];
        /**
         * Update Expense
         * @description Update an existing expense
         */
        put: operations["update_expense_api_expenses__expense_id__put"];
        post?: never;
        /**
         * Delete Expense
         * @description Delete an expense
         */
        delete: operations["delete_expense_api_expenses__expense_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vendors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Vendors
         * @description Get all vendors with optional filtering
         */
        get: operations["list_vendors_api_vendors_get"];
        put?: never;
        /**
         * Create Vendor
         * @description Create a new vendor
         */
        post: operations["create_vendor_api_vendors_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vendors/{vendor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vendor
         * @description Get a specific vendor by ID
         */
        get: operations["get_vendor_api_vendors__vendor_id__get"];
        /**
         * Update Vendor
         * @description Update an existing vendor
         */
        put: operations["update_vendor_api_vendors__vendor_id__put"];
        post?: never;
        /**
         * Delete Vendor
         * @description Delete a vendor
         */
        delete: operations["delete_vendor_api_vendors__vendor_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Locations
         * @description Get all locations
         */
        get: operations["read_locations_api_locations_get"];
        put?: never;
        /**
         * Create Location
         * @description Create a new location
         */
        post: operations["create_location_api_locations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Locations
         * @description Search locations by name, paddock name, or address
         */
        get: operations["search_locations_api_locations_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/occupancy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locations Occupancy
         * @description Get occupancy information for all locations
         */
        get: operations["get_locations_occupancy_api_locations_occupancy_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Locations
         * @description Get locations that have available space
         */
        get: operations["get_available_locations_api_locations_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/{location_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Location
         * @description Get a single location with animals
         */
        get: operations["read_location_api_locations__location_id__get"];
        /**
         * Update Location
         * @description Update an existing location
         */
        put: operations["update_location_api_locations__location_id__put"];
        post?: never;
        /**
         * Delete Location
         * @description Delete a location
         */
        delete: operations["delete_location_api_locations__location_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/{location_id}/animals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animals At Location
         * @description Get all animals currently at a specific location
         */
        get: operations["get_animals_at_location_api_locations__location_id__animals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/{location_id}/occupancy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Location Occupancy
         * @description Get occupancy information for a specific location
         */
        get: operations["get_location_occupancy_api_locations__location_id__occupancy_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/move-animals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move Animals Between Locations
         * @description Move multiple animals from one location to another
         */
        post: operations["move_animals_between_locations_api_locations_move_animals_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/photographs/upload/{animal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Photograph
         * @description Upload a photograph for an animal
         */
        post: operations["upload_photograph_api_photographs_upload__animal_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/photographs/animal/{animal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Animal Photographs
         * @description Get all photographs for an animal
         */
        get: operations["get_animal_photographs_api_photographs_animal__animal_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/photographs/{photograph_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Photograph
         * @description Get a specific photograph
         */
        get: operations["get_photograph_api_photographs__photograph_id__get"];
        /**
         * Update Photograph
         * @description Update photograph metadata
         */
        put: operations["update_photograph_api_photographs__photograph_id__put"];
        post?: never;
        /**
         * Delete Photograph
         * @description Delete a photograph
         */
        delete: operations["delete_photograph_api_photographs__photograph_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/photographs/{photograph_id}/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Photograph File
         * @description Serve the actual image file
         */
        get: operations["get_photograph_file_api_photographs__photograph_id__file_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/photographs/{photograph_id}/set-primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Primary Photograph
         * @description Set a photograph as the primary photo for an animal
         */
        post: operations["set_primary_photograph_api_photographs__photograph_id__set_primary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Info
         * @description API information endpoint
         */
        get: operations["api_info_api_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Frontend
         * @description Serve the React frontend
         */
        get: operations["serve_frontend__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{full_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Spa
         * @description Serve React app for all non-API routes (SPA routing)
         */
        get: operations["serve_spa__full_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AdminUserResponse */
        AdminUserResponse: {
            /** Id */
            id: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            role: components["schemas"]["UserRole"];
            /** Provider */
            provider: string;
            /** Is Active */
            is_active: boolean;
            /** Is Verified */
            is_verified: boolean;
        };
        /**
         * Animal
         * @description Schema for returning animal data
         */
        Animal: {
            /** Name */
            name?: string | null;
            /**
             * Tag Number
             * @description Unique tag number for the animal
             */
            tag_number: string;
            /** @description Type of animal (sheep, chicken, hive) */
            animal_type: components["schemas"]["AnimalType"];
            /** @description Gender for sheep (ewe or ram) */
            sheep_gender?: components["schemas"]["SheepGender"] | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Current Location Id */
            current_location_id?: number | null;
            /** Sire Id */
            sire_id?: number | null;
            /** Dam Id */
            dam_id?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * AnimalBrief
         * @description Brief animal info for nested responses
         */
        AnimalBrief: {
            /** Id */
            id: number;
            /** Name */
            name?: string | null;
            /** Tag Number */
            tag_number: string;
            animal_type: components["schemas"]["AnimalType"];
            sheep_gender?: components["schemas"]["SheepGender"] | null;
        };
        /**
         * AnimalCreate
         * @description Schema for creating a new animal
         */
        AnimalCreate: {
            /** Name */
            name?: string | null;
            /**
             * Tag Number
             * @description Unique tag number for the animal
             */
            tag_number: string;
            /** @description Type of animal (sheep, chicken, hive) */
            animal_type: components["schemas"]["AnimalType"];
            /** @description Gender for sheep (ewe or ram) */
            sheep_gender?: components["schemas"]["SheepGender"] | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Current Location Id */
            current_location_id?: number | null;
            /** Sire Id */
            sire_id?: number | null;
            /** Dam Id */
            dam_id?: number | null;
        };
        /**
         * AnimalType
         * @enum {string}
         */
        AnimalType: "sheep" | "chicken" | "hive";
        /**
         * AnimalUpdate
         * @description Schema for updating an existing animal
         */
        AnimalUpdate: {
            /** Name */
            name?: string | null;
            /** Tag Number */
            tag_number?: string | null;
            animal_type?: components["schemas"]["AnimalType"] | null;
            sheep_gender?: components["schemas"]["SheepGender"] | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Current Location Id */
            current_location_id?: number | null;
            /** Sire Id */
            sire_id?: number | null;
            /** Dam Id */
            dam_id?: number | null;
        };
        /**
         * AnimalWithDetails
         * @description Schema for animal with all related data
         */
        AnimalWithDetails: {
            /** Name */
            name?: string | null;
            /**
             * Tag Number
             * @description Unique tag number for the animal
             */
            tag_number: string;
            /** @description Type of animal (sheep, chicken, hive) */
            animal_type: components["schemas"]["AnimalType"];
            /** @description Gender for sheep (ewe or ram) */
            sheep_gender?: components["schemas"]["SheepGender"] | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Current Location Id */
            current_location_id?: number | null;
            /** Sire Id */
            sire_id?: number | null;
            /** Dam Id */
            dam_id?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            current_location?: components["schemas"]["LocationBrief"] | null;
            sire?: components["schemas"]["AnimalBrief"] | null;
            dam?: components["schemas"]["AnimalBrief"] | null;
            /**
             * Photographs
             * @default []
             */
            photographs: components["schemas"]["PhotographBrief"][];
        };
        /**
         * AnimalWithLocation
         * @description Schema for animal with location information
         */
        AnimalWithLocation: {
            /** Name */
            name?: string | null;
            /**
             * Tag Number
             * @description Unique tag number for the animal
             */
            tag_number: string;
            /** @description Type of animal (sheep, chicken, hive) */
            animal_type: components["schemas"]["AnimalType"];
            /** @description Gender for sheep (ewe or ram) */
            sheep_gender?: components["schemas"]["SheepGender"] | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Current Location Id */
            current_location_id?: number | null;
            /** Sire Id */
            sire_id?: number | null;
            /** Dam Id */
            dam_id?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            current_location?: components["schemas"]["LocationBrief"] | null;
        };
        /** AuthResponse */
        AuthResponse: {
            user: components["schemas"]["UserResponse"];
            /** Token */
            token: string;
        };
        /** Body_upload_photograph_api_photographs_upload__animal_id__post */
        Body_upload_photograph_api_photographs_upload__animal_id__post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Caption */
            caption?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Is Primary
             * @default false
             */
            is_primary: boolean;
        };
        /**
         * Event
         * @description Schema for returning event data
         */
        Event: {
            /**
             * Animal Id
             * @description ID of the animal this event relates to
             */
            animal_id: number;
            /** @description Type of event */
            event_type: components["schemas"]["EventType"];
            /**
             * Event Date
             * Format: date-time
             * @description Date and time when the event occurred
             */
            event_date: string;
            /**
             * Description
             * @description Description of the event
             */
            description?: string | null;
            /**
             * Notes
             * @description Additional notes about the event
             */
            notes?: string | null;
            /**
             * Medication Name
             * @description Name of medication (for medication events)
             */
            medication_name?: string | null;
            /**
             * Dosage
             * @description Dosage administered
             */
            dosage?: string | null;
            /**
             * Veterinarian
             * @description Veterinarian who performed the procedure
             */
            veterinarian?: string | null;
            /**
             * Cost
             * @description Cost of the treatment/procedure
             */
            cost?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * EventBulkCreate
         * @description Schema for creating multiple events at once
         */
        EventBulkCreate: {
            /**
             * Events
             * @description List of events to create
             */
            events: components["schemas"]["EventCreate"][];
        };
        /**
         * EventCreate
         * @description Schema for creating a new event
         */
        EventCreate: {
            /**
             * Animal Id
             * @description ID of the animal this event relates to
             */
            animal_id: number;
            /** @description Type of event */
            event_type: components["schemas"]["EventType"];
            /**
             * Event Date
             * Format: date-time
             * @description Date and time when the event occurred
             */
            event_date: string;
            /**
             * Description
             * @description Description of the event
             */
            description?: string | null;
            /**
             * Notes
             * @description Additional notes about the event
             */
            notes?: string | null;
            /**
             * Medication Name
             * @description Name of medication (for medication events)
             */
            medication_name?: string | null;
            /**
             * Dosage
             * @description Dosage administered
             */
            dosage?: string | null;
            /**
             * Veterinarian
             * @description Veterinarian who performed the procedure
             */
            veterinarian?: string | null;
            /**
             * Cost
             * @description Cost of the treatment/procedure
             */
            cost?: string | null;
        };
        /**
         * EventType
         * @enum {string}
         */
        EventType: "deworming" | "delicing" | "mite_treatment" | "lambing" | "health_check" | "medication" | "breeding" | "birth" | "death" | "injury" | "treatment" | "other";
        /**
         * EventUpdate
         * @description Schema for updating an existing event
         */
        EventUpdate: {
            /** Animal Id */
            animal_id?: number | null;
            event_type?: components["schemas"]["EventType"] | null;
            /** Event Date */
            event_date?: string | null;
            /** Description */
            description?: string | null;
            /** Notes */
            notes?: string | null;
            /** Medication Name */
            medication_name?: string | null;
            /** Dosage */
            dosage?: string | null;
            /** Veterinarian */
            veterinarian?: string | null;
            /** Cost */
            cost?: string | null;
        };
        /**
         * EventWithAnimal
         * @description Schema for event with animal information
         */
        EventWithAnimal: {
            /**
             * Animal Id
             * @description ID of the animal this event relates to
             */
            animal_id: number;
            /** @description Type of event */
            event_type: components["schemas"]["EventType"];
            /**
             * Event Date
             * Format: date-time
             * @description Date and time when the event occurred
             */
            event_date: string;
            /**
             * Description
             * @description Description of the event
             */
            description?: string | null;
            /**
             * Notes
             * @description Additional notes about the event
             */
            notes?: string | null;
            /**
             * Medication Name
             * @description Name of medication (for medication events)
             */
            medication_name?: string | null;
            /**
             * Dosage
             * @description Dosage administered
             */
            dosage?: string | null;
            /**
             * Veterinarian
             * @description Veterinarian who performed the procedure
             */
            veterinarian?: string | null;
            /**
             * Cost
             * @description Cost of the treatment/procedure
             */
            cost?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * ExpenseCategory
         * @enum {string}
         */
        ExpenseCategory: "feed" | "seed" | "medication" | "veterinary" | "infrastructure" | "equipment" | "supplies" | "utilities" | "labor" | "maintenance" | "other";
        /** ExpenseCreate */
        ExpenseCreate: {
            category: components["schemas"]["ExpenseCategory"];
            /** Amount */
            amount: number | string;
            /** Description */
            description: string;
            /** Notes */
            notes?: string | null;
            /**
             * Expense Date
             * Format: date-time
             */
            expense_date: string;
            /** Vendor Id */
            vendor_id?: number | null;
        };
        /** ExpenseResponse */
        ExpenseResponse: {
            category: components["schemas"]["ExpenseCategory"];
            /** Amount */
            amount: string;
            /** Description */
            description: string;
            /** Notes */
            notes?: string | null;
            /**
             * Expense Date
             * Format: date-time
             */
            expense_date: string;
            /** Vendor Id */
            vendor_id?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            vendor?: components["schemas"]["VendorResponse"] | null;
        };
        /** ExpenseUpdate */
        ExpenseUpdate: {
            category?: components["schemas"]["ExpenseCategory"] | null;
            /** Amount */
            amount?: (number | string) | null;
            /** Description */
            description?: string | null;
            /** Notes */
            notes?: string | null;
            /** Expense Date */
            expense_date?: string | null;
            /** Vendor Id */
            vendor_id?: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Location
         * @description Schema for returning location data
         */
        Location: {
            /**
             * Name
             * @description Name of the location
             */
            name: string;
            /**
             * Address
             * @description Physical address of the location
             */
            address?: string | null;
            /**
             * Paddock Name
             * @description Name of the paddock/field
             */
            paddock_name?: string | null;
            /**
             * Description
             * @description Description of the location
             */
            description?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate
             */
            longitude?: number | null;
            /**
             * Area Size
             * @description Size of the area
             */
            area_size?: number | null;
            /**
             * Area Unit
             * @description Unit of area measurement (acres, hectares, etc.)
             */
            area_unit?: string | null;
            /**
             * Capacity
             * @description Maximum number of animals this location can hold
             */
            capacity?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * LocationBrief
         * @description Brief location info for nested responses
         */
        LocationBrief: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Paddock Name */
            paddock_name?: string | null;
        };
        /**
         * LocationCreate
         * @description Schema for creating a new location
         */
        LocationCreate: {
            /**
             * Name
             * @description Name of the location
             */
            name: string;
            /**
             * Address
             * @description Physical address of the location
             */
            address?: string | null;
            /**
             * Paddock Name
             * @description Name of the paddock/field
             */
            paddock_name?: string | null;
            /**
             * Description
             * @description Description of the location
             */
            description?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate
             */
            longitude?: number | null;
            /**
             * Area Size
             * @description Size of the area
             */
            area_size?: number | null;
            /**
             * Area Unit
             * @description Unit of area measurement (acres, hectares, etc.)
             */
            area_unit?: string | null;
            /**
             * Capacity
             * @description Maximum number of animals this location can hold
             */
            capacity?: number | null;
        };
        /**
         * LocationUpdate
         * @description Schema for updating an existing location
         */
        LocationUpdate: {
            /** Name */
            name?: string | null;
            /** Address */
            address?: string | null;
            /** Paddock Name */
            paddock_name?: string | null;
            /** Description */
            description?: string | null;
            /** Latitude */
            latitude?: number | null;
            /** Longitude */
            longitude?: number | null;
            /** Area Size */
            area_size?: number | null;
            /** Area Unit */
            area_unit?: string | null;
            /** Capacity */
            capacity?: number | null;
        };
        /**
         * LocationWithAnimals
         * @description Schema for location with current animals
         */
        LocationWithAnimals: {
            /**
             * Name
             * @description Name of the location
             */
            name: string;
            /**
             * Address
             * @description Physical address of the location
             */
            address?: string | null;
            /**
             * Paddock Name
             * @description Name of the paddock/field
             */
            paddock_name?: string | null;
            /**
             * Description
             * @description Description of the location
             */
            description?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate
             */
            longitude?: number | null;
            /**
             * Area Size
             * @description Size of the area
             */
            area_size?: number | null;
            /**
             * Area Unit
             * @description Unit of area measurement (acres, hectares, etc.)
             */
            area_unit?: string | null;
            /**
             * Capacity
             * @description Maximum number of animals this location can hold
             */
            capacity?: number | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * Photograph
         * @description Schema for returning photograph data
         */
        Photograph: {
            /**
             * Animal Id
             * @description ID of the animal this photograph belongs to
             */
            animal_id: number;
            /**
             * Caption
             * @description Caption for the photograph
             */
            caption?: string | null;
            /**
             * Description
             * @description Description of the photograph
             */
            description?: string | null;
            /**
             * Date Taken
             * @description Date when the photograph was taken
             */
            date_taken?: string | null;
            /**
             * Is Primary
             * @description Whether this is the primary photo for the animal
             * @default false
             */
            is_primary: boolean;
            /** Id */
            id: number;
            /** Filename */
            filename: string;
            /** Original Filename */
            original_filename: string;
            /** File Path */
            file_path: string;
            /** File Size */
            file_size: number;
            /** Mime Type */
            mime_type: string;
            /** Width */
            width?: number | null;
            /** Height */
            height?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PhotographBrief
         * @description Brief photograph info for nested responses
         */
        PhotographBrief: {
            /** Id */
            id: number;
            /** Filename */
            filename: string;
            /** File Path */
            file_path: string;
            /** Caption */
            caption?: string | null;
            /** Is Primary */
            is_primary: boolean;
            /** Width */
            width?: number | null;
            /** Height */
            height?: number | null;
        };
        /**
         * PhotographUpdate
         * @description Schema for updating photograph metadata
         */
        PhotographUpdate: {
            /** Caption */
            caption?: string | null;
            /** Description */
            description?: string | null;
            /** Date Taken */
            date_taken?: string | null;
            /** Is Primary */
            is_primary?: boolean | null;
        };
        /**
         * PhotographUploadResponse
         * @description Response schema for photograph upload
         */
        PhotographUploadResponse: {
            photograph: components["schemas"]["Photograph"];
            /**
             * Message
             * @default Photograph uploaded successfully
             */
            message: string;
        };
        /** ResetUserPassword */
        ResetUserPassword: {
            /** New Password */
            new_password: string;
        };
        /**
         * SheepGender
         * @enum {string}
         */
        SheepGender: "ewe" | "ram";
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** UpdateUserRole */
        UpdateUserRole: {
            role: components["schemas"]["UserRole"];
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /** Picture */
            picture?: string | null;
            /** @default customer */
            role: components["schemas"]["UserRole"];
            /** Password */
            password: string;
        };
        /** UserLogin */
        UserLogin: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** UserResponse */
        UserResponse: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /** Picture */
            picture?: string | null;
            /** @default customer */
            role: components["schemas"]["UserRole"];
            /** Id */
            id: number;
            /** Provider */
            provider: string;
            /** Is Active */
            is_active: boolean;
            /** Is Verified */
            is_verified: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "customer" | "user" | "admin";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VendorCreate */
        VendorCreate: {
            /** Name */
            name: string;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Website */
            website?: string | null;
        };
        /** VendorResponse */
        VendorResponse: {
            /** Name */
            name: string;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Website */
            website?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** VendorUpdate */
        VendorUpdate: {
            /** Name */
            name?: string | null;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Website */
            website?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_api_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_users_me_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login_for_access_token_api_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_admin_users_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"][];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_admin_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_role_api_admin_users__user_id__role_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRole"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_user_password_api_admin_users__user_id__reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetUserPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_user_api_admin_users__user_id__activate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_user_api_admin_users__user_id__deactivate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUserResponse"];
                };
            };
            /** @description Not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_animals_api_animals_get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records to return */
                limit?: number;
                /** @description Filter by animal type */
                animal_type?: components["schemas"]["AnimalType"] | null;
                /** @description Filter by current location */
                location_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnimalWithDetails"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_animal_api_animals_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnimalCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Animal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_animals_api_animals_search_get: {
        parameters: {
            query: {
                /** @description Search term for name or tag number */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animals_by_type_api_animals_type__animal_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_type: components["schemas"]["AnimalType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Animal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_animal_by_tag_api_animals_tag__tag_number__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnimalWithLocation"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_animal_api_animals__animal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnimalWithDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_animal_api_animals__animal_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnimalUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Animal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_animal_api_animals__animal_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animal_offspring_api_animals__animal_id__offspring_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Animal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    move_animal_to_location_api_animals__animal_id__move_post: {
        parameters: {
            query: {
                location_id: number;
            };
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_events_api_events_get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records to return */
                limit?: number;
                /** @description Filter by animal ID */
                animal_id?: number | null;
                /** @description Filter by event type */
                event_type?: components["schemas"]["EventType"] | null;
                /** @description Filter events from this date */
                start_date?: string | null;
                /** @description Filter events until this date */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventWithAnimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_event_api_events_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_bulk_events_api_events_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventBulkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_events_api_events_search_get: {
        parameters: {
            query: {
                /** @description Search term for description, notes, medication, or veterinarian */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recent_events_api_events_recent_get: {
        parameters: {
            query?: {
                /** @description Number of days to look back */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_upcoming_events_api_events_upcoming_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_events_by_type_api_events_type__event_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_type: components["schemas"]["EventType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventWithAnimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_event_api_events__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventWithAnimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_event_api_events__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_event_api_events__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_events_by_animal_api_events_animal__animal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animal_health_events_api_events_animal__animal_id__health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animal_medication_history_api_events_animal__animal_id__medication_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_expenses_api_expenses_get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records to return */
                limit?: number;
                /** @description Filter by expense category */
                category?: components["schemas"]["ExpenseCategory"] | null;
                /** @description Filter expenses from this date */
                start_date?: string | null;
                /** @description Filter expenses until this date */
                end_date?: string | null;
                /** @description Filter by vendor name */
                vendor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_expense_api_expenses_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpenseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_expense_api_expenses__expense_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                expense_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_expense_api_expenses__expense_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                expense_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpenseUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_expense_api_expenses__expense_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                expense_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_vendors_api_vendors_get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records to return */
                limit?: number;
                /** @description Search by vendor name */
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_vendor_api_vendors_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VendorCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vendor_api_vendors__vendor_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vendor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vendor_api_vendors__vendor_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vendor_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VendorUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vendor_api_vendors__vendor_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vendor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_locations_api_locations_get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Location"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_location_api_locations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Location"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_locations_api_locations_search_get: {
        parameters: {
            query: {
                /** @description Search term for name, paddock, or address */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_locations_occupancy_api_locations_occupancy_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_available_locations_api_locations_available_get: {
        parameters: {
            query?: {
                /** @description Minimum available space required */
                minimum_space?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_location_api_locations__location_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationWithAnimals"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_location_api_locations__location_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Location"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_location_api_locations__location_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animals_at_location_api_locations__location_id__animals_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Animal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_location_occupancy_api_locations__location_id__occupancy_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    move_animals_between_locations_api_locations_move_animals_post: {
        parameters: {
            query: {
                from_location_id: number;
                to_location_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_photograph_api_photographs_upload__animal_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_photograph_api_photographs_upload__animal_id__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhotographUploadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_animal_photographs_api_photographs_animal__animal_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                animal_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photograph"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_photograph_api_photographs__photograph_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photograph_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photograph"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_photograph_api_photographs__photograph_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photograph_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PhotographUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Photograph"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_photograph_api_photographs__photograph_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photograph_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_photograph_file_api_photographs__photograph_id__file_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photograph_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_primary_photograph_api_photographs__photograph_id__set_primary_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photograph_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_info_api_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    serve_frontend__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    serve_spa__full_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                full_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
