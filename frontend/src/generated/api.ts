/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Flock Tracker API
 * 
    ## Flock Tracker API

    A comprehensive API for tracking farm animals, events, and locations.

    ### Features:
    * **Animal Management**: Track sheep, chickens, and bees with lineage information
    * **Event Tracking**: Record health events, treatments, breeding, and more
    * **Location Management**: Manage paddocks and locations with capacity tracking
    * **Search & Filter**: Powerful search and filtering capabilities

    ### Animal Types:
    * **Sheep**: Track lineage, health events, and location with gender tracking (ewes/rams)
    * **Chickens**: Monitor flock health and egg production
    * **Hives**: Track hive health and honey production
    
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Animal,
  AnimalCreate,
  AnimalType,
  AnimalUpdate,
  AnimalWithDetails,
  AnimalWithLocation,
  BodyUploadPhotographApiPhotographsUploadAnimalIdPost,
  Event,
  EventCreate,
  EventType,
  EventUpdate,
  EventWithAnimal,
  GetAvailableLocationsApiLocationsAvailableGetParams,
  GetRecentEventsApiEventsRecentGetParams,
  HTTPValidationError,
  Location,
  LocationCreate,
  LocationUpdate,
  LocationWithAnimals,
  MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams,
  MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams,
  Photograph,
  PhotographUpdate,
  PhotographUploadResponse,
  ReadAnimalsApiAnimalsGetParams,
  ReadEventsApiEventsGetParams,
  ReadLocationsApiLocationsGetParams,
  SearchAnimalsApiAnimalsSearchGetParams,
  SearchEventsApiEventsSearchGetParams,
  SearchLocationsApiLocationsSearchGetParams
} from './models';

import { apiClient } from '../services/api-client';




/**
 * Get all animals with optional filtering
 * @summary Read Animals
 */
export const readAnimalsApiAnimalsGet = (
    params?: ReadAnimalsApiAnimalsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AnimalWithDetails[]>(
      {url: `/api/animals/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadAnimalsApiAnimalsGetQueryKey = (params?: ReadAnimalsApiAnimalsGetParams,) => {
    return [`/api/animals/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAnimalsApiAnimalsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError = HTTPValidationError>(params?: ReadAnimalsApiAnimalsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAnimalsApiAnimalsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>> = ({ signal }) => readAnimalsApiAnimalsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAnimalsApiAnimalsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>>
export type ReadAnimalsApiAnimalsGetQueryError = HTTPValidationError


export function useReadAnimalsApiAnimalsGet<TData = Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError = HTTPValidationError>(
 params: undefined |  ReadAnimalsApiAnimalsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalsApiAnimalsGet<TData = Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError = HTTPValidationError>(
 params?: ReadAnimalsApiAnimalsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalsApiAnimalsGet<TData = Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError = HTTPValidationError>(
 params?: ReadAnimalsApiAnimalsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Animals
 */

export function useReadAnimalsApiAnimalsGet<TData = Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError = HTTPValidationError>(
 params?: ReadAnimalsApiAnimalsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalsApiAnimalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAnimalsApiAnimalsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new animal
 * @summary Create Animal
 */
export const createAnimalApiAnimalsPost = (
    animalCreate: AnimalCreate,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Animal>(
      {url: `/api/animals/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: animalCreate, signal
    },
      );
    }
  


export const getCreateAnimalApiAnimalsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>, TError,{data: AnimalCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>, TError,{data: AnimalCreate}, TContext> => {

const mutationKey = ['createAnimalApiAnimalsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>, {data: AnimalCreate}> = (props) => {
          const {data} = props ?? {};

          return  createAnimalApiAnimalsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAnimalApiAnimalsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>>
    export type CreateAnimalApiAnimalsPostMutationBody = AnimalCreate
    export type CreateAnimalApiAnimalsPostMutationError = HTTPValidationError

    /**
 * @summary Create Animal
 */
export const useCreateAnimalApiAnimalsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>, TError,{data: AnimalCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAnimalApiAnimalsPost>>,
        TError,
        {data: AnimalCreate},
        TContext
      > => {

      const mutationOptions = getCreateAnimalApiAnimalsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Search animals by name or tag number
 * @summary Search Animals
 */
export const searchAnimalsApiAnimalsSearchGet = (
    params: SearchAnimalsApiAnimalsSearchGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/animals/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchAnimalsApiAnimalsSearchGetQueryKey = (params?: SearchAnimalsApiAnimalsSearchGetParams,) => {
    return [`/api/animals/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchAnimalsApiAnimalsSearchGetQueryOptions = <TData = Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError = HTTPValidationError>(params: SearchAnimalsApiAnimalsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchAnimalsApiAnimalsSearchGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>> = ({ signal }) => searchAnimalsApiAnimalsSearchGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchAnimalsApiAnimalsSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>>
export type SearchAnimalsApiAnimalsSearchGetQueryError = HTTPValidationError


export function useSearchAnimalsApiAnimalsSearchGet<TData = Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError = HTTPValidationError>(
 params: SearchAnimalsApiAnimalsSearchGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAnimalsApiAnimalsSearchGet<TData = Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError = HTTPValidationError>(
 params: SearchAnimalsApiAnimalsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAnimalsApiAnimalsSearchGet<TData = Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError = HTTPValidationError>(
 params: SearchAnimalsApiAnimalsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search Animals
 */

export function useSearchAnimalsApiAnimalsSearchGet<TData = Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError = HTTPValidationError>(
 params: SearchAnimalsApiAnimalsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAnimalsApiAnimalsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchAnimalsApiAnimalsSearchGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all animals of a specific type
 * @summary Get Animals By Type
 */
export const getAnimalsByTypeApiAnimalsTypeAnimalTypeGet = (
    animalType: AnimalType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Animal[]>(
      {url: `/api/animals/type/${animalType}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryKey = (animalType?: AnimalType,) => {
    return [`/api/animals/type/${animalType}`] as const;
    }

    
export const getGetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError = HTTPValidationError>(animalType: AnimalType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryKey(animalType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>> = ({ signal }) => getAnimalsByTypeApiAnimalsTypeAnimalTypeGet(animalType, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>>
export type GetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryError = HTTPValidationError


export function useGetAnimalsByTypeApiAnimalsTypeAnimalTypeGet<TData = Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError = HTTPValidationError>(
 animalType: AnimalType, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalsByTypeApiAnimalsTypeAnimalTypeGet<TData = Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError = HTTPValidationError>(
 animalType: AnimalType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalsByTypeApiAnimalsTypeAnimalTypeGet<TData = Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError = HTTPValidationError>(
 animalType: AnimalType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animals By Type
 */

export function useGetAnimalsByTypeApiAnimalsTypeAnimalTypeGet<TData = Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError = HTTPValidationError>(
 animalType: AnimalType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsByTypeApiAnimalsTypeAnimalTypeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalsByTypeApiAnimalsTypeAnimalTypeGetQueryOptions(animalType,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get animal by tag number
 * @summary Read Animal By Tag
 */
export const readAnimalByTagApiAnimalsTagTagNumberGet = (
    tagNumber: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AnimalWithLocation>(
      {url: `/api/animals/tag/${tagNumber}`, method: 'GET', signal
    },
      );
    }
  

export const getReadAnimalByTagApiAnimalsTagTagNumberGetQueryKey = (tagNumber?: string,) => {
    return [`/api/animals/tag/${tagNumber}`] as const;
    }

    
export const getReadAnimalByTagApiAnimalsTagTagNumberGetQueryOptions = <TData = Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError = HTTPValidationError>(tagNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAnimalByTagApiAnimalsTagTagNumberGetQueryKey(tagNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>> = ({ signal }) => readAnimalByTagApiAnimalsTagTagNumberGet(tagNumber, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tagNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAnimalByTagApiAnimalsTagTagNumberGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>>
export type ReadAnimalByTagApiAnimalsTagTagNumberGetQueryError = HTTPValidationError


export function useReadAnimalByTagApiAnimalsTagTagNumberGet<TData = Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError = HTTPValidationError>(
 tagNumber: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalByTagApiAnimalsTagTagNumberGet<TData = Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError = HTTPValidationError>(
 tagNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalByTagApiAnimalsTagTagNumberGet<TData = Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError = HTTPValidationError>(
 tagNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Animal By Tag
 */

export function useReadAnimalByTagApiAnimalsTagTagNumberGet<TData = Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError = HTTPValidationError>(
 tagNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalByTagApiAnimalsTagTagNumberGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAnimalByTagApiAnimalsTagTagNumberGetQueryOptions(tagNumber,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get a single animal with all details
 * @summary Read Animal
 */
export const readAnimalApiAnimalsAnimalIdGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AnimalWithDetails>(
      {url: `/api/animals/${animalId}`, method: 'GET', signal
    },
      );
    }
  

export const getReadAnimalApiAnimalsAnimalIdGetQueryKey = (animalId?: number,) => {
    return [`/api/animals/${animalId}`] as const;
    }

    
export const getReadAnimalApiAnimalsAnimalIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAnimalApiAnimalsAnimalIdGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>> = ({ signal }) => readAnimalApiAnimalsAnimalIdGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAnimalApiAnimalsAnimalIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>>
export type ReadAnimalApiAnimalsAnimalIdGetQueryError = HTTPValidationError


export function useReadAnimalApiAnimalsAnimalIdGet<TData = Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalApiAnimalsAnimalIdGet<TData = Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAnimalApiAnimalsAnimalIdGet<TData = Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Animal
 */

export function useReadAnimalApiAnimalsAnimalIdGet<TData = Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAnimalApiAnimalsAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAnimalApiAnimalsAnimalIdGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing animal
 * @summary Update Animal
 */
export const updateAnimalApiAnimalsAnimalIdPut = (
    animalId: number,
    animalUpdate: AnimalUpdate,
 ) => {
      
      
      return apiClient<Animal>(
      {url: `/api/animals/${animalId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: animalUpdate
    },
      );
    }
  


export const getUpdateAnimalApiAnimalsAnimalIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>, TError,{animalId: number;data: AnimalUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>, TError,{animalId: number;data: AnimalUpdate}, TContext> => {

const mutationKey = ['updateAnimalApiAnimalsAnimalIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>, {animalId: number;data: AnimalUpdate}> = (props) => {
          const {animalId,data} = props ?? {};

          return  updateAnimalApiAnimalsAnimalIdPut(animalId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAnimalApiAnimalsAnimalIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>>
    export type UpdateAnimalApiAnimalsAnimalIdPutMutationBody = AnimalUpdate
    export type UpdateAnimalApiAnimalsAnimalIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Animal
 */
export const useUpdateAnimalApiAnimalsAnimalIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>, TError,{animalId: number;data: AnimalUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAnimalApiAnimalsAnimalIdPut>>,
        TError,
        {animalId: number;data: AnimalUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateAnimalApiAnimalsAnimalIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete an animal
 * @summary Delete Animal
 */
export const deleteAnimalApiAnimalsAnimalIdDelete = (
    animalId: number,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/animals/${animalId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAnimalApiAnimalsAnimalIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>, TError,{animalId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>, TError,{animalId: number}, TContext> => {

const mutationKey = ['deleteAnimalApiAnimalsAnimalIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>, {animalId: number}> = (props) => {
          const {animalId} = props ?? {};

          return  deleteAnimalApiAnimalsAnimalIdDelete(animalId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAnimalApiAnimalsAnimalIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>>
    
    export type DeleteAnimalApiAnimalsAnimalIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Animal
 */
export const useDeleteAnimalApiAnimalsAnimalIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>, TError,{animalId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAnimalApiAnimalsAnimalIdDelete>>,
        TError,
        {animalId: number},
        TContext
      > => {

      const mutationOptions = getDeleteAnimalApiAnimalsAnimalIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all offspring of an animal
 * @summary Get Animal Offspring
 */
export const getAnimalOffspringApiAnimalsAnimalIdOffspringGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Animal[]>(
      {url: `/api/animals/${animalId}/offspring`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryKey = (animalId?: number,) => {
    return [`/api/animals/${animalId}/offspring`] as const;
    }

    
export const getGetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>> = ({ signal }) => getAnimalOffspringApiAnimalsAnimalIdOffspringGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>>
export type GetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryError = HTTPValidationError


export function useGetAnimalOffspringApiAnimalsAnimalIdOffspringGet<TData = Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalOffspringApiAnimalsAnimalIdOffspringGet<TData = Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalOffspringApiAnimalsAnimalIdOffspringGet<TData = Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animal Offspring
 */

export function useGetAnimalOffspringApiAnimalsAnimalIdOffspringGet<TData = Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalOffspringApiAnimalsAnimalIdOffspringGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalOffspringApiAnimalsAnimalIdOffspringGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Move an animal to a new location
 * @summary Move Animal To Location
 */
export const moveAnimalToLocationApiAnimalsAnimalIdMovePost = (
    animalId: number,
    params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/animals/${animalId}/move`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getMoveAnimalToLocationApiAnimalsAnimalIdMovePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>, TError,{animalId: number;params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>, TError,{animalId: number;params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams}, TContext> => {

const mutationKey = ['moveAnimalToLocationApiAnimalsAnimalIdMovePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>, {animalId: number;params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams}> = (props) => {
          const {animalId,params} = props ?? {};

          return  moveAnimalToLocationApiAnimalsAnimalIdMovePost(animalId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MoveAnimalToLocationApiAnimalsAnimalIdMovePostMutationResult = NonNullable<Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>>
    
    export type MoveAnimalToLocationApiAnimalsAnimalIdMovePostMutationError = HTTPValidationError

    /**
 * @summary Move Animal To Location
 */
export const useMoveAnimalToLocationApiAnimalsAnimalIdMovePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>, TError,{animalId: number;params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof moveAnimalToLocationApiAnimalsAnimalIdMovePost>>,
        TError,
        {animalId: number;params: MoveAnimalToLocationApiAnimalsAnimalIdMovePostParams},
        TContext
      > => {

      const mutationOptions = getMoveAnimalToLocationApiAnimalsAnimalIdMovePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all events with optional filtering
 * @summary Read Events
 */
export const readEventsApiEventsGet = (
    params?: ReadEventsApiEventsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventWithAnimal[]>(
      {url: `/api/events/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadEventsApiEventsGetQueryKey = (params?: ReadEventsApiEventsGetParams,) => {
    return [`/api/events/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadEventsApiEventsGetQueryOptions = <TData = Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError = HTTPValidationError>(params?: ReadEventsApiEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadEventsApiEventsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readEventsApiEventsGet>>> = ({ signal }) => readEventsApiEventsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadEventsApiEventsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEventsApiEventsGet>>>
export type ReadEventsApiEventsGetQueryError = HTTPValidationError


export function useReadEventsApiEventsGet<TData = Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError = HTTPValidationError>(
 params: undefined |  ReadEventsApiEventsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsApiEventsGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsApiEventsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsApiEventsGet<TData = Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError = HTTPValidationError>(
 params?: ReadEventsApiEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsApiEventsGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsApiEventsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsApiEventsGet<TData = Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError = HTTPValidationError>(
 params?: ReadEventsApiEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Events
 */

export function useReadEventsApiEventsGet<TData = Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError = HTTPValidationError>(
 params?: ReadEventsApiEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsApiEventsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadEventsApiEventsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new event
 * @summary Create Event
 */
export const createEventApiEventsPost = (
    eventCreate: EventCreate,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Event>(
      {url: `/api/events/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventCreate, signal
    },
      );
    }
  


export const getCreateEventApiEventsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventApiEventsPost>>, TError,{data: EventCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEventApiEventsPost>>, TError,{data: EventCreate}, TContext> => {

const mutationKey = ['createEventApiEventsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEventApiEventsPost>>, {data: EventCreate}> = (props) => {
          const {data} = props ?? {};

          return  createEventApiEventsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventApiEventsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createEventApiEventsPost>>>
    export type CreateEventApiEventsPostMutationBody = EventCreate
    export type CreateEventApiEventsPostMutationError = HTTPValidationError

    /**
 * @summary Create Event
 */
export const useCreateEventApiEventsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventApiEventsPost>>, TError,{data: EventCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createEventApiEventsPost>>,
        TError,
        {data: EventCreate},
        TContext
      > => {

      const mutationOptions = getCreateEventApiEventsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Search events by description, notes, medication, or veterinarian
 * @summary Search Events
 */
export const searchEventsApiEventsSearchGet = (
    params: SearchEventsApiEventsSearchGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/events/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchEventsApiEventsSearchGetQueryKey = (params?: SearchEventsApiEventsSearchGetParams,) => {
    return [`/api/events/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchEventsApiEventsSearchGetQueryOptions = <TData = Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError = HTTPValidationError>(params: SearchEventsApiEventsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchEventsApiEventsSearchGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>> = ({ signal }) => searchEventsApiEventsSearchGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchEventsApiEventsSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>>
export type SearchEventsApiEventsSearchGetQueryError = HTTPValidationError


export function useSearchEventsApiEventsSearchGet<TData = Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError = HTTPValidationError>(
 params: SearchEventsApiEventsSearchGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchEventsApiEventsSearchGet<TData = Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError = HTTPValidationError>(
 params: SearchEventsApiEventsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchEventsApiEventsSearchGet<TData = Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError = HTTPValidationError>(
 params: SearchEventsApiEventsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search Events
 */

export function useSearchEventsApiEventsSearchGet<TData = Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError = HTTPValidationError>(
 params: SearchEventsApiEventsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEventsApiEventsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchEventsApiEventsSearchGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get events from the last N days
 * @summary Get Recent Events
 */
export const getRecentEventsApiEventsRecentGet = (
    params?: GetRecentEventsApiEventsRecentGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/events/recent`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRecentEventsApiEventsRecentGetQueryKey = (params?: GetRecentEventsApiEventsRecentGetParams,) => {
    return [`/api/events/recent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRecentEventsApiEventsRecentGetQueryOptions = <TData = Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError = HTTPValidationError>(params?: GetRecentEventsApiEventsRecentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecentEventsApiEventsRecentGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>> = ({ signal }) => getRecentEventsApiEventsRecentGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentEventsApiEventsRecentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>>
export type GetRecentEventsApiEventsRecentGetQueryError = HTTPValidationError


export function useGetRecentEventsApiEventsRecentGet<TData = Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError = HTTPValidationError>(
 params: undefined |  GetRecentEventsApiEventsRecentGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>,
          TError,
          Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecentEventsApiEventsRecentGet<TData = Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError = HTTPValidationError>(
 params?: GetRecentEventsApiEventsRecentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>,
          TError,
          Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecentEventsApiEventsRecentGet<TData = Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError = HTTPValidationError>(
 params?: GetRecentEventsApiEventsRecentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Recent Events
 */

export function useGetRecentEventsApiEventsRecentGet<TData = Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError = HTTPValidationError>(
 params?: GetRecentEventsApiEventsRecentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentEventsApiEventsRecentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRecentEventsApiEventsRecentGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get upcoming scheduled events
 * @summary Get Upcoming Events
 */
export const getUpcomingEventsApiEventsUpcomingGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/events/upcoming`, method: 'GET', signal
    },
      );
    }
  

export const getGetUpcomingEventsApiEventsUpcomingGetQueryKey = () => {
    return [`/api/events/upcoming`] as const;
    }

    
export const getGetUpcomingEventsApiEventsUpcomingGetQueryOptions = <TData = Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUpcomingEventsApiEventsUpcomingGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>> = ({ signal }) => getUpcomingEventsApiEventsUpcomingGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUpcomingEventsApiEventsUpcomingGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>>
export type GetUpcomingEventsApiEventsUpcomingGetQueryError = unknown


export function useGetUpcomingEventsApiEventsUpcomingGet<TData = Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>,
          TError,
          Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUpcomingEventsApiEventsUpcomingGet<TData = Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>,
          TError,
          Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUpcomingEventsApiEventsUpcomingGet<TData = Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Upcoming Events
 */

export function useGetUpcomingEventsApiEventsUpcomingGet<TData = Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEventsApiEventsUpcomingGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUpcomingEventsApiEventsUpcomingGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all events of a specific type
 * @summary Get Events By Type
 */
export const getEventsByTypeApiEventsTypeEventTypeGet = (
    eventType: EventType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventWithAnimal[]>(
      {url: `/api/events/type/${eventType}`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventsByTypeApiEventsTypeEventTypeGetQueryKey = (eventType?: EventType,) => {
    return [`/api/events/type/${eventType}`] as const;
    }

    
export const getGetEventsByTypeApiEventsTypeEventTypeGetQueryOptions = <TData = Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError = HTTPValidationError>(eventType: EventType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventsByTypeApiEventsTypeEventTypeGetQueryKey(eventType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>> = ({ signal }) => getEventsByTypeApiEventsTypeEventTypeGet(eventType, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventsByTypeApiEventsTypeEventTypeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>>
export type GetEventsByTypeApiEventsTypeEventTypeGetQueryError = HTTPValidationError


export function useGetEventsByTypeApiEventsTypeEventTypeGet<TData = Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError = HTTPValidationError>(
 eventType: EventType, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>,
          TError,
          Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsByTypeApiEventsTypeEventTypeGet<TData = Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError = HTTPValidationError>(
 eventType: EventType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>,
          TError,
          Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsByTypeApiEventsTypeEventTypeGet<TData = Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError = HTTPValidationError>(
 eventType: EventType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Events By Type
 */

export function useGetEventsByTypeApiEventsTypeEventTypeGet<TData = Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError = HTTPValidationError>(
 eventType: EventType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByTypeApiEventsTypeEventTypeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEventsByTypeApiEventsTypeEventTypeGetQueryOptions(eventType,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get a single event by ID
 * @summary Read Event
 */
export const readEventApiEventsEventIdGet = (
    eventId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventWithAnimal>(
      {url: `/api/events/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getReadEventApiEventsEventIdGetQueryKey = (eventId?: number,) => {
    return [`/api/events/${eventId}`] as const;
    }

    
export const getReadEventApiEventsEventIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError = HTTPValidationError>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadEventApiEventsEventIdGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>> = ({ signal }) => readEventApiEventsEventIdGet(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadEventApiEventsEventIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>>
export type ReadEventApiEventsEventIdGetQueryError = HTTPValidationError


export function useReadEventApiEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError = HTTPValidationError>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventApiEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError = HTTPValidationError>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventApiEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError = HTTPValidationError>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Event
 */

export function useReadEventApiEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError = HTTPValidationError>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventApiEventsEventIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadEventApiEventsEventIdGetQueryOptions(eventId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing event
 * @summary Update Event
 */
export const updateEventApiEventsEventIdPut = (
    eventId: number,
    eventUpdate: EventUpdate,
 ) => {
      
      
      return apiClient<Event>(
      {url: `/api/events/${eventId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventUpdate
    },
      );
    }
  


export const getUpdateEventApiEventsEventIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>, TError,{eventId: number;data: EventUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>, TError,{eventId: number;data: EventUpdate}, TContext> => {

const mutationKey = ['updateEventApiEventsEventIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>, {eventId: number;data: EventUpdate}> = (props) => {
          const {eventId,data} = props ?? {};

          return  updateEventApiEventsEventIdPut(eventId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateEventApiEventsEventIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>>
    export type UpdateEventApiEventsEventIdPutMutationBody = EventUpdate
    export type UpdateEventApiEventsEventIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Event
 */
export const useUpdateEventApiEventsEventIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>, TError,{eventId: number;data: EventUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateEventApiEventsEventIdPut>>,
        TError,
        {eventId: number;data: EventUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateEventApiEventsEventIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete an event
 * @summary Delete Event
 */
export const deleteEventApiEventsEventIdDelete = (
    eventId: number,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/events/${eventId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteEventApiEventsEventIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>, TError,{eventId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>, TError,{eventId: number}, TContext> => {

const mutationKey = ['deleteEventApiEventsEventIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>, {eventId: number}> = (props) => {
          const {eventId} = props ?? {};

          return  deleteEventApiEventsEventIdDelete(eventId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEventApiEventsEventIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>>
    
    export type DeleteEventApiEventsEventIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Event
 */
export const useDeleteEventApiEventsEventIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>, TError,{eventId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteEventApiEventsEventIdDelete>>,
        TError,
        {eventId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEventApiEventsEventIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all events for a specific animal
 * @summary Read Events By Animal
 */
export const readEventsByAnimalApiEventsAnimalAnimalIdGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Event[]>(
      {url: `/api/events/animal/${animalId}`, method: 'GET', signal
    },
      );
    }
  

export const getReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryKey = (animalId?: number,) => {
    return [`/api/events/animal/${animalId}`] as const;
    }

    
export const getReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>> = ({ signal }) => readEventsByAnimalApiEventsAnimalAnimalIdGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>>
export type ReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryError = HTTPValidationError


export function useReadEventsByAnimalApiEventsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsByAnimalApiEventsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsByAnimalApiEventsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Events By Animal
 */

export function useReadEventsByAnimalApiEventsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsByAnimalApiEventsAnimalAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadEventsByAnimalApiEventsAnimalAnimalIdGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all health-related events for an animal
 * @summary Get Animal Health Events
 */
export const getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Event[]>(
      {url: `/api/events/animal/${animalId}/health`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryKey = (animalId?: number,) => {
    return [`/api/events/animal/${animalId}/health`] as const;
    }

    
export const getGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>> = ({ signal }) => getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>>
export type GetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryError = HTTPValidationError


export function useGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet<TData = Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet<TData = Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet<TData = Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animal Health Events
 */

export function useGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet<TData = Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalHealthEventsApiEventsAnimalAnimalIdHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalHealthEventsApiEventsAnimalAnimalIdHealthGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get medication history for an animal
 * @summary Get Animal Medication History
 */
export const getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Event[]>(
      {url: `/api/events/animal/${animalId}/medication`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryKey = (animalId?: number,) => {
    return [`/api/events/animal/${animalId}/medication`] as const;
    }

    
export const getGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>> = ({ signal }) => getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>>
export type GetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryError = HTTPValidationError


export function useGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet<TData = Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet<TData = Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet<TData = Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animal Medication History
 */

export function useGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet<TData = Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalMedicationHistoryApiEventsAnimalAnimalIdMedicationGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all locations
 * @summary Read Locations
 */
export const readLocationsApiLocationsGet = (
    params?: ReadLocationsApiLocationsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Location[]>(
      {url: `/api/locations/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadLocationsApiLocationsGetQueryKey = (params?: ReadLocationsApiLocationsGetParams,) => {
    return [`/api/locations/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadLocationsApiLocationsGetQueryOptions = <TData = Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError = HTTPValidationError>(params?: ReadLocationsApiLocationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadLocationsApiLocationsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>> = ({ signal }) => readLocationsApiLocationsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadLocationsApiLocationsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>>
export type ReadLocationsApiLocationsGetQueryError = HTTPValidationError


export function useReadLocationsApiLocationsGet<TData = Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError = HTTPValidationError>(
 params: undefined |  ReadLocationsApiLocationsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLocationsApiLocationsGet>>,
          TError,
          Awaited<ReturnType<typeof readLocationsApiLocationsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLocationsApiLocationsGet<TData = Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError = HTTPValidationError>(
 params?: ReadLocationsApiLocationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLocationsApiLocationsGet>>,
          TError,
          Awaited<ReturnType<typeof readLocationsApiLocationsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLocationsApiLocationsGet<TData = Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError = HTTPValidationError>(
 params?: ReadLocationsApiLocationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Locations
 */

export function useReadLocationsApiLocationsGet<TData = Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError = HTTPValidationError>(
 params?: ReadLocationsApiLocationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationsApiLocationsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadLocationsApiLocationsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new location
 * @summary Create Location
 */
export const createLocationApiLocationsPost = (
    locationCreate: LocationCreate,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Location>(
      {url: `/api/locations/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: locationCreate, signal
    },
      );
    }
  


export const getCreateLocationApiLocationsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationApiLocationsPost>>, TError,{data: LocationCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createLocationApiLocationsPost>>, TError,{data: LocationCreate}, TContext> => {

const mutationKey = ['createLocationApiLocationsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLocationApiLocationsPost>>, {data: LocationCreate}> = (props) => {
          const {data} = props ?? {};

          return  createLocationApiLocationsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLocationApiLocationsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createLocationApiLocationsPost>>>
    export type CreateLocationApiLocationsPostMutationBody = LocationCreate
    export type CreateLocationApiLocationsPostMutationError = HTTPValidationError

    /**
 * @summary Create Location
 */
export const useCreateLocationApiLocationsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationApiLocationsPost>>, TError,{data: LocationCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createLocationApiLocationsPost>>,
        TError,
        {data: LocationCreate},
        TContext
      > => {

      const mutationOptions = getCreateLocationApiLocationsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Search locations by name, paddock name, or address
 * @summary Search Locations
 */
export const searchLocationsApiLocationsSearchGet = (
    params: SearchLocationsApiLocationsSearchGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchLocationsApiLocationsSearchGetQueryKey = (params?: SearchLocationsApiLocationsSearchGetParams,) => {
    return [`/api/locations/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchLocationsApiLocationsSearchGetQueryOptions = <TData = Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError = HTTPValidationError>(params: SearchLocationsApiLocationsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchLocationsApiLocationsSearchGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>> = ({ signal }) => searchLocationsApiLocationsSearchGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchLocationsApiLocationsSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>>
export type SearchLocationsApiLocationsSearchGetQueryError = HTTPValidationError


export function useSearchLocationsApiLocationsSearchGet<TData = Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError = HTTPValidationError>(
 params: SearchLocationsApiLocationsSearchGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchLocationsApiLocationsSearchGet<TData = Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError = HTTPValidationError>(
 params: SearchLocationsApiLocationsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchLocationsApiLocationsSearchGet<TData = Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError = HTTPValidationError>(
 params: SearchLocationsApiLocationsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search Locations
 */

export function useSearchLocationsApiLocationsSearchGet<TData = Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError = HTTPValidationError>(
 params: SearchLocationsApiLocationsSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsApiLocationsSearchGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchLocationsApiLocationsSearchGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get occupancy information for all locations
 * @summary Get Locations Occupancy
 */
export const getLocationsOccupancyApiLocationsOccupancyGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/occupancy`, method: 'GET', signal
    },
      );
    }
  

export const getGetLocationsOccupancyApiLocationsOccupancyGetQueryKey = () => {
    return [`/api/locations/occupancy`] as const;
    }

    
export const getGetLocationsOccupancyApiLocationsOccupancyGetQueryOptions = <TData = Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationsOccupancyApiLocationsOccupancyGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>> = ({ signal }) => getLocationsOccupancyApiLocationsOccupancyGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLocationsOccupancyApiLocationsOccupancyGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>>
export type GetLocationsOccupancyApiLocationsOccupancyGetQueryError = unknown


export function useGetLocationsOccupancyApiLocationsOccupancyGet<TData = Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>,
          TError,
          Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLocationsOccupancyApiLocationsOccupancyGet<TData = Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>,
          TError,
          Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLocationsOccupancyApiLocationsOccupancyGet<TData = Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Locations Occupancy
 */

export function useGetLocationsOccupancyApiLocationsOccupancyGet<TData = Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsOccupancyApiLocationsOccupancyGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLocationsOccupancyApiLocationsOccupancyGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get locations that have available space
 * @summary Get Available Locations
 */
export const getAvailableLocationsApiLocationsAvailableGet = (
    params?: GetAvailableLocationsApiLocationsAvailableGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/available`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAvailableLocationsApiLocationsAvailableGetQueryKey = (params?: GetAvailableLocationsApiLocationsAvailableGetParams,) => {
    return [`/api/locations/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAvailableLocationsApiLocationsAvailableGetQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError = HTTPValidationError>(params?: GetAvailableLocationsApiLocationsAvailableGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableLocationsApiLocationsAvailableGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>> = ({ signal }) => getAvailableLocationsApiLocationsAvailableGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableLocationsApiLocationsAvailableGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>>
export type GetAvailableLocationsApiLocationsAvailableGetQueryError = HTTPValidationError


export function useGetAvailableLocationsApiLocationsAvailableGet<TData = Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError = HTTPValidationError>(
 params: undefined |  GetAvailableLocationsApiLocationsAvailableGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableLocationsApiLocationsAvailableGet<TData = Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError = HTTPValidationError>(
 params?: GetAvailableLocationsApiLocationsAvailableGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableLocationsApiLocationsAvailableGet<TData = Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError = HTTPValidationError>(
 params?: GetAvailableLocationsApiLocationsAvailableGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Available Locations
 */

export function useGetAvailableLocationsApiLocationsAvailableGet<TData = Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError = HTTPValidationError>(
 params?: GetAvailableLocationsApiLocationsAvailableGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableLocationsApiLocationsAvailableGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableLocationsApiLocationsAvailableGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get a single location with animals
 * @summary Read Location
 */
export const readLocationApiLocationsLocationIdGet = (
    locationId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<LocationWithAnimals>(
      {url: `/api/locations/${locationId}`, method: 'GET', signal
    },
      );
    }
  

export const getReadLocationApiLocationsLocationIdGetQueryKey = (locationId?: number,) => {
    return [`/api/locations/${locationId}`] as const;
    }

    
export const getReadLocationApiLocationsLocationIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError = HTTPValidationError>(locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadLocationApiLocationsLocationIdGetQueryKey(locationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>> = ({ signal }) => readLocationApiLocationsLocationIdGet(locationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadLocationApiLocationsLocationIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>>
export type ReadLocationApiLocationsLocationIdGetQueryError = HTTPValidationError


export function useReadLocationApiLocationsLocationIdGet<TData = Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError = HTTPValidationError>(
 locationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>,
          TError,
          Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLocationApiLocationsLocationIdGet<TData = Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>,
          TError,
          Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLocationApiLocationsLocationIdGet<TData = Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Location
 */

export function useReadLocationApiLocationsLocationIdGet<TData = Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLocationApiLocationsLocationIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadLocationApiLocationsLocationIdGetQueryOptions(locationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing location
 * @summary Update Location
 */
export const updateLocationApiLocationsLocationIdPut = (
    locationId: number,
    locationUpdate: LocationUpdate,
 ) => {
      
      
      return apiClient<Location>(
      {url: `/api/locations/${locationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: locationUpdate
    },
      );
    }
  


export const getUpdateLocationApiLocationsLocationIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>, TError,{locationId: number;data: LocationUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>, TError,{locationId: number;data: LocationUpdate}, TContext> => {

const mutationKey = ['updateLocationApiLocationsLocationIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>, {locationId: number;data: LocationUpdate}> = (props) => {
          const {locationId,data} = props ?? {};

          return  updateLocationApiLocationsLocationIdPut(locationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLocationApiLocationsLocationIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>>
    export type UpdateLocationApiLocationsLocationIdPutMutationBody = LocationUpdate
    export type UpdateLocationApiLocationsLocationIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Location
 */
export const useUpdateLocationApiLocationsLocationIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>, TError,{locationId: number;data: LocationUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateLocationApiLocationsLocationIdPut>>,
        TError,
        {locationId: number;data: LocationUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateLocationApiLocationsLocationIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a location
 * @summary Delete Location
 */
export const deleteLocationApiLocationsLocationIdDelete = (
    locationId: number,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/${locationId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLocationApiLocationsLocationIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>, TError,{locationId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>, TError,{locationId: number}, TContext> => {

const mutationKey = ['deleteLocationApiLocationsLocationIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>, {locationId: number}> = (props) => {
          const {locationId} = props ?? {};

          return  deleteLocationApiLocationsLocationIdDelete(locationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationApiLocationsLocationIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>>
    
    export type DeleteLocationApiLocationsLocationIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Location
 */
export const useDeleteLocationApiLocationsLocationIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>, TError,{locationId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationApiLocationsLocationIdDelete>>,
        TError,
        {locationId: number},
        TContext
      > => {

      const mutationOptions = getDeleteLocationApiLocationsLocationIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all animals currently at a specific location
 * @summary Get Animals At Location
 */
export const getAnimalsAtLocationApiLocationsLocationIdAnimalsGet = (
    locationId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Animal[]>(
      {url: `/api/locations/${locationId}/animals`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryKey = (locationId?: number,) => {
    return [`/api/locations/${locationId}/animals`] as const;
    }

    
export const getGetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError = HTTPValidationError>(locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryKey(locationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>> = ({ signal }) => getAnimalsAtLocationApiLocationsLocationIdAnimalsGet(locationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>>
export type GetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryError = HTTPValidationError


export function useGetAnimalsAtLocationApiLocationsLocationIdAnimalsGet<TData = Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError = HTTPValidationError>(
 locationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalsAtLocationApiLocationsLocationIdAnimalsGet<TData = Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalsAtLocationApiLocationsLocationIdAnimalsGet<TData = Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animals At Location
 */

export function useGetAnimalsAtLocationApiLocationsLocationIdAnimalsGet<TData = Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalsAtLocationApiLocationsLocationIdAnimalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalsAtLocationApiLocationsLocationIdAnimalsGetQueryOptions(locationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get occupancy information for a specific location
 * @summary Get Location Occupancy
 */
export const getLocationOccupancyApiLocationsLocationIdOccupancyGet = (
    locationId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/${locationId}/occupancy`, method: 'GET', signal
    },
      );
    }
  

export const getGetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryKey = (locationId?: number,) => {
    return [`/api/locations/${locationId}/occupancy`] as const;
    }

    
export const getGetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryOptions = <TData = Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError = HTTPValidationError>(locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryKey(locationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>> = ({ signal }) => getLocationOccupancyApiLocationsLocationIdOccupancyGet(locationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>>
export type GetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryError = HTTPValidationError


export function useGetLocationOccupancyApiLocationsLocationIdOccupancyGet<TData = Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError = HTTPValidationError>(
 locationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>,
          TError,
          Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLocationOccupancyApiLocationsLocationIdOccupancyGet<TData = Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>,
          TError,
          Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLocationOccupancyApiLocationsLocationIdOccupancyGet<TData = Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Location Occupancy
 */

export function useGetLocationOccupancyApiLocationsLocationIdOccupancyGet<TData = Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError = HTTPValidationError>(
 locationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationOccupancyApiLocationsLocationIdOccupancyGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLocationOccupancyApiLocationsLocationIdOccupancyGetQueryOptions(locationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Move multiple animals from one location to another
 * @summary Move Animals Between Locations
 */
export const moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost = (
    moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostBody: number[],
    params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/locations/move-animals`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostBody,
        params, signal
    },
      );
    }
  


export const getMoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>, TError,{data: number[];params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>, TError,{data: number[];params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams}, TContext> => {

const mutationKey = ['moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>, {data: number[];params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams}> = (props) => {
          const {data,params} = props ?? {};

          return  moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostMutationResult = NonNullable<Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>>
    export type MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostMutationBody = number[]
    export type MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostMutationError = HTTPValidationError

    /**
 * @summary Move Animals Between Locations
 */
export const useMoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>, TError,{data: number[];params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof moveAnimalsBetweenLocationsApiLocationsMoveAnimalsPost>>,
        TError,
        {data: number[];params: MoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostParams},
        TContext
      > => {

      const mutationOptions = getMoveAnimalsBetweenLocationsApiLocationsMoveAnimalsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Upload a photograph for an animal
 * @summary Upload Photograph
 */
export const uploadPhotographApiPhotographsUploadAnimalIdPost = (
    animalId: number,
    bodyUploadPhotographApiPhotographsUploadAnimalIdPost: BodyUploadPhotographApiPhotographsUploadAnimalIdPost,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, bodyUploadPhotographApiPhotographsUploadAnimalIdPost.file)
if(bodyUploadPhotographApiPhotographsUploadAnimalIdPost.caption !== undefined && bodyUploadPhotographApiPhotographsUploadAnimalIdPost.caption !== null) {
 formData.append(`caption`, bodyUploadPhotographApiPhotographsUploadAnimalIdPost.caption)
 }
if(bodyUploadPhotographApiPhotographsUploadAnimalIdPost.description !== undefined && bodyUploadPhotographApiPhotographsUploadAnimalIdPost.description !== null) {
 formData.append(`description`, bodyUploadPhotographApiPhotographsUploadAnimalIdPost.description)
 }
if(bodyUploadPhotographApiPhotographsUploadAnimalIdPost.is_primary !== undefined) {
 formData.append(`is_primary`, bodyUploadPhotographApiPhotographsUploadAnimalIdPost.is_primary.toString())
 }

      return apiClient<PhotographUploadResponse>(
      {url: `/api/photographs/upload/${animalId}`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getUploadPhotographApiPhotographsUploadAnimalIdPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>, TError,{animalId: number;data: BodyUploadPhotographApiPhotographsUploadAnimalIdPost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>, TError,{animalId: number;data: BodyUploadPhotographApiPhotographsUploadAnimalIdPost}, TContext> => {

const mutationKey = ['uploadPhotographApiPhotographsUploadAnimalIdPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>, {animalId: number;data: BodyUploadPhotographApiPhotographsUploadAnimalIdPost}> = (props) => {
          const {animalId,data} = props ?? {};

          return  uploadPhotographApiPhotographsUploadAnimalIdPost(animalId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadPhotographApiPhotographsUploadAnimalIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>>
    export type UploadPhotographApiPhotographsUploadAnimalIdPostMutationBody = BodyUploadPhotographApiPhotographsUploadAnimalIdPost
    export type UploadPhotographApiPhotographsUploadAnimalIdPostMutationError = HTTPValidationError

    /**
 * @summary Upload Photograph
 */
export const useUploadPhotographApiPhotographsUploadAnimalIdPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>, TError,{animalId: number;data: BodyUploadPhotographApiPhotographsUploadAnimalIdPost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadPhotographApiPhotographsUploadAnimalIdPost>>,
        TError,
        {animalId: number;data: BodyUploadPhotographApiPhotographsUploadAnimalIdPost},
        TContext
      > => {

      const mutationOptions = getUploadPhotographApiPhotographsUploadAnimalIdPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all photographs for an animal
 * @summary Get Animal Photographs
 */
export const getAnimalPhotographsApiPhotographsAnimalAnimalIdGet = (
    animalId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Photograph[]>(
      {url: `/api/photographs/animal/${animalId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryKey = (animalId?: number,) => {
    return [`/api/photographs/animal/${animalId}`] as const;
    }

    
export const getGetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError = HTTPValidationError>(animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryKey(animalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>> = ({ signal }) => getAnimalPhotographsApiPhotographsAnimalAnimalIdGet(animalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(animalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>>
export type GetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryError = HTTPValidationError


export function useGetAnimalPhotographsApiPhotographsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalPhotographsApiPhotographsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnimalPhotographsApiPhotographsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Animal Photographs
 */

export function useGetAnimalPhotographsApiPhotographsAnimalAnimalIdGet<TData = Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError = HTTPValidationError>(
 animalId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnimalPhotographsApiPhotographsAnimalAnimalIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnimalPhotographsApiPhotographsAnimalAnimalIdGetQueryOptions(animalId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get a specific photograph
 * @summary Get Photograph
 */
export const getPhotographApiPhotographsPhotographIdGet = (
    photographId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<Photograph>(
      {url: `/api/photographs/${photographId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetPhotographApiPhotographsPhotographIdGetQueryKey = (photographId?: number,) => {
    return [`/api/photographs/${photographId}`] as const;
    }

    
export const getGetPhotographApiPhotographsPhotographIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError = HTTPValidationError>(photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPhotographApiPhotographsPhotographIdGetQueryKey(photographId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>> = ({ signal }) => getPhotographApiPhotographsPhotographIdGet(photographId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(photographId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPhotographApiPhotographsPhotographIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>>
export type GetPhotographApiPhotographsPhotographIdGetQueryError = HTTPValidationError


export function useGetPhotographApiPhotographsPhotographIdGet<TData = Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError = HTTPValidationError>(
 photographId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotographApiPhotographsPhotographIdGet<TData = Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotographApiPhotographsPhotographIdGet<TData = Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Photograph
 */

export function useGetPhotographApiPhotographsPhotographIdGet<TData = Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographApiPhotographsPhotographIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPhotographApiPhotographsPhotographIdGetQueryOptions(photographId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update photograph metadata
 * @summary Update Photograph
 */
export const updatePhotographApiPhotographsPhotographIdPut = (
    photographId: number,
    photographUpdate: PhotographUpdate,
 ) => {
      
      
      return apiClient<Photograph>(
      {url: `/api/photographs/${photographId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: photographUpdate
    },
      );
    }
  


export const getUpdatePhotographApiPhotographsPhotographIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>, TError,{photographId: number;data: PhotographUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>, TError,{photographId: number;data: PhotographUpdate}, TContext> => {

const mutationKey = ['updatePhotographApiPhotographsPhotographIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>, {photographId: number;data: PhotographUpdate}> = (props) => {
          const {photographId,data} = props ?? {};

          return  updatePhotographApiPhotographsPhotographIdPut(photographId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePhotographApiPhotographsPhotographIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>>
    export type UpdatePhotographApiPhotographsPhotographIdPutMutationBody = PhotographUpdate
    export type UpdatePhotographApiPhotographsPhotographIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Photograph
 */
export const useUpdatePhotographApiPhotographsPhotographIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>, TError,{photographId: number;data: PhotographUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePhotographApiPhotographsPhotographIdPut>>,
        TError,
        {photographId: number;data: PhotographUpdate},
        TContext
      > => {

      const mutationOptions = getUpdatePhotographApiPhotographsPhotographIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a photograph
 * @summary Delete Photograph
 */
export const deletePhotographApiPhotographsPhotographIdDelete = (
    photographId: number,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/photographs/${photographId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletePhotographApiPhotographsPhotographIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>, TError,{photographId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>, TError,{photographId: number}, TContext> => {

const mutationKey = ['deletePhotographApiPhotographsPhotographIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>, {photographId: number}> = (props) => {
          const {photographId} = props ?? {};

          return  deletePhotographApiPhotographsPhotographIdDelete(photographId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePhotographApiPhotographsPhotographIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>>
    
    export type DeletePhotographApiPhotographsPhotographIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Photograph
 */
export const useDeletePhotographApiPhotographsPhotographIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>, TError,{photographId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePhotographApiPhotographsPhotographIdDelete>>,
        TError,
        {photographId: number},
        TContext
      > => {

      const mutationOptions = getDeletePhotographApiPhotographsPhotographIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Serve the actual image file
 * @summary Get Photograph File
 */
export const getPhotographFileApiPhotographsPhotographIdFileGet = (
    photographId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/photographs/${photographId}/file`, method: 'GET', signal
    },
      );
    }
  

export const getGetPhotographFileApiPhotographsPhotographIdFileGetQueryKey = (photographId?: number,) => {
    return [`/api/photographs/${photographId}/file`] as const;
    }

    
export const getGetPhotographFileApiPhotographsPhotographIdFileGetQueryOptions = <TData = Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError = HTTPValidationError>(photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPhotographFileApiPhotographsPhotographIdFileGetQueryKey(photographId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>> = ({ signal }) => getPhotographFileApiPhotographsPhotographIdFileGet(photographId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(photographId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPhotographFileApiPhotographsPhotographIdFileGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>>
export type GetPhotographFileApiPhotographsPhotographIdFileGetQueryError = HTTPValidationError


export function useGetPhotographFileApiPhotographsPhotographIdFileGet<TData = Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError = HTTPValidationError>(
 photographId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>,
          TError,
          Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotographFileApiPhotographsPhotographIdFileGet<TData = Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>,
          TError,
          Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotographFileApiPhotographsPhotographIdFileGet<TData = Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Photograph File
 */

export function useGetPhotographFileApiPhotographsPhotographIdFileGet<TData = Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError = HTTPValidationError>(
 photographId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotographFileApiPhotographsPhotographIdFileGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPhotographFileApiPhotographsPhotographIdFileGetQueryOptions(photographId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Set a photograph as the primary photo for an animal
 * @summary Set Primary Photograph
 */
export const setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost = (
    photographId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/photographs/${photographId}/set-primary`, method: 'POST', signal
    },
      );
    }
  


export const getSetPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>, TError,{photographId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>, TError,{photographId: number}, TContext> => {

const mutationKey = ['setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>, {photographId: number}> = (props) => {
          const {photographId} = props ?? {};

          return  setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost(photographId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPostMutationResult = NonNullable<Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>>
    
    export type SetPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPostMutationError = HTTPValidationError

    /**
 * @summary Set Primary Photograph
 */
export const useSetPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>, TError,{photographId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPost>>,
        TError,
        {photographId: number},
        TContext
      > => {

      const mutationOptions = getSetPrimaryPhotographApiPhotographsPhotographIdSetPrimaryPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Root endpoint with API information
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Health check endpoint
 * @summary Health Check
 */
export const healthCheckHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) => healthCheckHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = unknown


export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * API information endpoint
 * @summary Api Info
 */
export const apiInfoApiGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api`, method: 'GET', signal
    },
      );
    }
  

export const getApiInfoApiGetQueryKey = () => {
    return [`/api`] as const;
    }

    
export const getApiInfoApiGetQueryOptions = <TData = Awaited<ReturnType<typeof apiInfoApiGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiInfoApiGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiInfoApiGet>>> = ({ signal }) => apiInfoApiGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiInfoApiGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiInfoApiGet>>>
export type ApiInfoApiGetQueryError = unknown


export function useApiInfoApiGet<TData = Awaited<ReturnType<typeof apiInfoApiGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiInfoApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiInfoApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiInfoApiGet<TData = Awaited<ReturnType<typeof apiInfoApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiInfoApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiInfoApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiInfoApiGet<TData = Awaited<ReturnType<typeof apiInfoApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Api Info
 */

export function useApiInfoApiGet<TData = Awaited<ReturnType<typeof apiInfoApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiInfoApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiInfoApiGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




