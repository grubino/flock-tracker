# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-10-03T14:52:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, EmailStr, Field, PositiveFloat, constr


class AnimalType(Enum):
    sheep = 'sheep'
    chicken = 'chicken'
    hive = 'hive'


class BodyUploadPhotographApiPhotographsUploadAnimalIdPost(BaseModel):
    file: bytes = Field(..., title='File')
    caption: Optional[str] = Field(None, title='Caption')
    description: Optional[str] = Field(None, title='Description')
    is_primary: Optional[bool] = Field(False, title='Is Primary')


class EventType(Enum):
    deworming = 'deworming'
    delicing = 'delicing'
    mite_treatment = 'mite_treatment'
    lambing = 'lambing'
    health_check = 'health_check'
    medication = 'medication'
    breeding = 'breeding'
    birth = 'birth'
    death = 'death'
    injury = 'injury'
    treatment = 'treatment'
    other = 'other'


class EventUpdate(BaseModel):
    animal_id: Optional[int] = Field(None, title='Animal Id')
    event_type: Optional[EventType] = None
    event_date: Optional[datetime] = Field(None, title='Event Date')
    description: Optional[str] = Field(None, title='Description')
    notes: Optional[str] = Field(None, title='Notes')
    medication_name: Optional[str] = Field(None, title='Medication Name')
    dosage: Optional[str] = Field(None, title='Dosage')
    veterinarian: Optional[str] = Field(None, title='Veterinarian')
    cost: Optional[str] = Field(None, title='Cost')


class EventWithAnimal(BaseModel):
    animal_id: int = Field(
        ..., description='ID of the animal this event relates to', title='Animal Id'
    )
    event_type: EventType = Field(..., description='Type of event')
    event_date: datetime = Field(
        ..., description='Date and time when the event occurred', title='Event Date'
    )
    description: Optional[str] = Field(
        None, description='Description of the event', title='Description'
    )
    notes: Optional[str] = Field(
        None, description='Additional notes about the event', title='Notes'
    )
    medication_name: Optional[str] = Field(
        None,
        description='Name of medication (for medication events)',
        title='Medication Name',
    )
    dosage: Optional[str] = Field(
        None, description='Dosage administered', title='Dosage'
    )
    veterinarian: Optional[str] = Field(
        None,
        description='Veterinarian who performed the procedure',
        title='Veterinarian',
    )
    cost: Optional[str] = Field(
        None, description='Cost of the treatment/procedure', title='Cost'
    )
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class ExpenseCategory(Enum):
    feed = 'feed'
    seed = 'seed'
    medication = 'medication'
    veterinary = 'veterinary'
    infrastructure = 'infrastructure'
    equipment = 'equipment'
    supplies = 'supplies'
    utilities = 'utilities'
    labor = 'labor'
    maintenance = 'maintenance'
    other = 'other'


class ExpenseCreate(BaseModel):
    category: ExpenseCategory
    amount: Union[PositiveFloat, str] = Field(..., title='Amount')
    description: constr(min_length=1) = Field(..., title='Description')
    notes: Optional[str] = Field(None, title='Notes')
    expense_date: datetime = Field(..., title='Expense Date')
    vendor_id: Optional[int] = Field(None, title='Vendor Id')


class ExpenseUpdate(BaseModel):
    category: Optional[ExpenseCategory] = None
    amount: Optional[Union[float, str]] = Field(None, title='Amount')
    description: Optional[constr(min_length=1)] = Field(None, title='Description')
    notes: Optional[str] = Field(None, title='Notes')
    expense_date: Optional[datetime] = Field(None, title='Expense Date')
    vendor_id: Optional[int] = Field(None, title='Vendor Id')


class Location(BaseModel):
    name: str = Field(..., description='Name of the location', title='Name')
    address: Optional[str] = Field(
        None, description='Physical address of the location', title='Address'
    )
    paddock_name: Optional[str] = Field(
        None, description='Name of the paddock/field', title='Paddock Name'
    )
    description: Optional[str] = Field(
        None, description='Description of the location', title='Description'
    )
    latitude: Optional[float] = Field(
        None, description='Latitude coordinate', title='Latitude'
    )
    longitude: Optional[float] = Field(
        None, description='Longitude coordinate', title='Longitude'
    )
    area_size: Optional[float] = Field(
        None, description='Size of the area', title='Area Size'
    )
    area_unit: Optional[str] = Field(
        None,
        description='Unit of area measurement (acres, hectares, etc.)',
        title='Area Unit',
    )
    capacity: Optional[int] = Field(
        None,
        description='Maximum number of animals this location can hold',
        title='Capacity',
    )
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class LocationBrief(BaseModel):
    id: int = Field(..., title='Id')
    name: str = Field(..., title='Name')
    paddock_name: Optional[str] = Field(None, title='Paddock Name')


class LocationCreate(BaseModel):
    name: str = Field(..., description='Name of the location', title='Name')
    address: Optional[str] = Field(
        None, description='Physical address of the location', title='Address'
    )
    paddock_name: Optional[str] = Field(
        None, description='Name of the paddock/field', title='Paddock Name'
    )
    description: Optional[str] = Field(
        None, description='Description of the location', title='Description'
    )
    latitude: Optional[float] = Field(
        None, description='Latitude coordinate', title='Latitude'
    )
    longitude: Optional[float] = Field(
        None, description='Longitude coordinate', title='Longitude'
    )
    area_size: Optional[float] = Field(
        None, description='Size of the area', title='Area Size'
    )
    area_unit: Optional[str] = Field(
        None,
        description='Unit of area measurement (acres, hectares, etc.)',
        title='Area Unit',
    )
    capacity: Optional[int] = Field(
        None,
        description='Maximum number of animals this location can hold',
        title='Capacity',
    )


class LocationUpdate(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    address: Optional[str] = Field(None, title='Address')
    paddock_name: Optional[str] = Field(None, title='Paddock Name')
    description: Optional[str] = Field(None, title='Description')
    latitude: Optional[float] = Field(None, title='Latitude')
    longitude: Optional[float] = Field(None, title='Longitude')
    area_size: Optional[float] = Field(None, title='Area Size')
    area_unit: Optional[str] = Field(None, title='Area Unit')
    capacity: Optional[int] = Field(None, title='Capacity')


class LocationWithAnimals(BaseModel):
    name: str = Field(..., description='Name of the location', title='Name')
    address: Optional[str] = Field(
        None, description='Physical address of the location', title='Address'
    )
    paddock_name: Optional[str] = Field(
        None, description='Name of the paddock/field', title='Paddock Name'
    )
    description: Optional[str] = Field(
        None, description='Description of the location', title='Description'
    )
    latitude: Optional[float] = Field(
        None, description='Latitude coordinate', title='Latitude'
    )
    longitude: Optional[float] = Field(
        None, description='Longitude coordinate', title='Longitude'
    )
    area_size: Optional[float] = Field(
        None, description='Size of the area', title='Area Size'
    )
    area_unit: Optional[str] = Field(
        None,
        description='Unit of area measurement (acres, hectares, etc.)',
        title='Area Unit',
    )
    capacity: Optional[int] = Field(
        None,
        description='Maximum number of animals this location can hold',
        title='Capacity',
    )
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class Photograph(BaseModel):
    animal_id: int = Field(
        ...,
        description='ID of the animal this photograph belongs to',
        title='Animal Id',
    )
    caption: Optional[str] = Field(
        None, description='Caption for the photograph', title='Caption'
    )
    description: Optional[str] = Field(
        None, description='Description of the photograph', title='Description'
    )
    date_taken: Optional[datetime] = Field(
        None, description='Date when the photograph was taken', title='Date Taken'
    )
    is_primary: Optional[bool] = Field(
        False,
        description='Whether this is the primary photo for the animal',
        title='Is Primary',
    )
    id: int = Field(..., title='Id')
    filename: str = Field(..., title='Filename')
    original_filename: str = Field(..., title='Original Filename')
    file_path: str = Field(..., title='File Path')
    file_size: int = Field(..., title='File Size')
    mime_type: str = Field(..., title='Mime Type')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class PhotographBrief(BaseModel):
    id: int = Field(..., title='Id')
    filename: str = Field(..., title='Filename')
    file_path: str = Field(..., title='File Path')
    caption: Optional[str] = Field(None, title='Caption')
    is_primary: bool = Field(..., title='Is Primary')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class PhotographUpdate(BaseModel):
    caption: Optional[str] = Field(None, title='Caption')
    description: Optional[str] = Field(None, title='Description')
    date_taken: Optional[datetime] = Field(None, title='Date Taken')
    is_primary: Optional[bool] = Field(None, title='Is Primary')


class PhotographUploadResponse(BaseModel):
    photograph: Photograph
    message: Optional[str] = Field('Photograph uploaded successfully', title='Message')


class ResetUserPassword(BaseModel):
    new_password: str = Field(..., title='New Password')


class SheepGender(Enum):
    ewe = 'ewe'
    ram = 'ram'


class Token(BaseModel):
    access_token: str = Field(..., title='Access Token')
    token_type: str = Field(..., title='Token Type')


class UserLogin(BaseModel):
    email: EmailStr = Field(..., title='Email')
    password: str = Field(..., title='Password')


class UserRole(Enum):
    customer = 'customer'
    user = 'user'
    admin = 'admin'


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class VendorCreate(BaseModel):
    name: constr(min_length=1) = Field(..., title='Name')
    address: Optional[str] = Field(None, title='Address')
    phone: Optional[str] = Field(None, title='Phone')
    website: Optional[str] = Field(None, title='Website')


class VendorResponse(BaseModel):
    name: constr(min_length=1) = Field(..., title='Name')
    address: Optional[str] = Field(None, title='Address')
    phone: Optional[str] = Field(None, title='Phone')
    website: Optional[str] = Field(None, title='Website')
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class VendorUpdate(BaseModel):
    name: Optional[constr(min_length=1)] = Field(None, title='Name')
    address: Optional[str] = Field(None, title='Address')
    phone: Optional[str] = Field(None, title='Phone')
    website: Optional[str] = Field(None, title='Website')


class ApiLocationsMoveAnimalsPostRequest(BaseModel):
    __root__: List[int] = Field(..., title='Animal Ids')


class AdminUserResponse(BaseModel):
    id: int = Field(..., title='Id')
    email: EmailStr = Field(..., title='Email')
    name: str = Field(..., title='Name')
    role: UserRole
    provider: str = Field(..., title='Provider')
    is_active: bool = Field(..., title='Is Active')
    is_verified: bool = Field(..., title='Is Verified')


class Animal(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    tag_number: str = Field(
        ..., description='Unique tag number for the animal', title='Tag Number'
    )
    animal_type: AnimalType = Field(
        ..., description='Type of animal (sheep, chicken, hive)'
    )
    sheep_gender: Optional[SheepGender] = Field(
        None, description='Gender for sheep (ewe or ram)'
    )
    birth_date: Optional[datetime] = Field(None, title='Birth Date')
    current_location_id: Optional[int] = Field(None, title='Current Location Id')
    sire_id: Optional[int] = Field(None, title='Sire Id')
    dam_id: Optional[int] = Field(None, title='Dam Id')
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AnimalBrief(BaseModel):
    id: int = Field(..., title='Id')
    name: Optional[str] = Field(None, title='Name')
    tag_number: str = Field(..., title='Tag Number')
    animal_type: AnimalType
    sheep_gender: Optional[SheepGender] = None


class AnimalCreate(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    tag_number: str = Field(
        ..., description='Unique tag number for the animal', title='Tag Number'
    )
    animal_type: AnimalType = Field(
        ..., description='Type of animal (sheep, chicken, hive)'
    )
    sheep_gender: Optional[SheepGender] = Field(
        None, description='Gender for sheep (ewe or ram)'
    )
    birth_date: Optional[datetime] = Field(None, title='Birth Date')
    current_location_id: Optional[int] = Field(None, title='Current Location Id')
    sire_id: Optional[int] = Field(None, title='Sire Id')
    dam_id: Optional[int] = Field(None, title='Dam Id')


class AnimalUpdate(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    tag_number: Optional[str] = Field(None, title='Tag Number')
    animal_type: Optional[AnimalType] = None
    sheep_gender: Optional[SheepGender] = None
    birth_date: Optional[datetime] = Field(None, title='Birth Date')
    current_location_id: Optional[int] = Field(None, title='Current Location Id')
    sire_id: Optional[int] = Field(None, title='Sire Id')
    dam_id: Optional[int] = Field(None, title='Dam Id')


class AnimalWithDetails(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    tag_number: str = Field(
        ..., description='Unique tag number for the animal', title='Tag Number'
    )
    animal_type: AnimalType = Field(
        ..., description='Type of animal (sheep, chicken, hive)'
    )
    sheep_gender: Optional[SheepGender] = Field(
        None, description='Gender for sheep (ewe or ram)'
    )
    birth_date: Optional[datetime] = Field(None, title='Birth Date')
    current_location_id: Optional[int] = Field(None, title='Current Location Id')
    sire_id: Optional[int] = Field(None, title='Sire Id')
    dam_id: Optional[int] = Field(None, title='Dam Id')
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    current_location: Optional[LocationBrief] = None
    sire: Optional[AnimalBrief] = None
    dam: Optional[AnimalBrief] = None
    photographs: Optional[List[PhotographBrief]] = Field([], title='Photographs')


class AnimalWithLocation(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    tag_number: str = Field(
        ..., description='Unique tag number for the animal', title='Tag Number'
    )
    animal_type: AnimalType = Field(
        ..., description='Type of animal (sheep, chicken, hive)'
    )
    sheep_gender: Optional[SheepGender] = Field(
        None, description='Gender for sheep (ewe or ram)'
    )
    birth_date: Optional[datetime] = Field(None, title='Birth Date')
    current_location_id: Optional[int] = Field(None, title='Current Location Id')
    sire_id: Optional[int] = Field(None, title='Sire Id')
    dam_id: Optional[int] = Field(None, title='Dam Id')
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    current_location: Optional[LocationBrief] = None


class Event(BaseModel):
    animal_id: int = Field(
        ..., description='ID of the animal this event relates to', title='Animal Id'
    )
    event_type: EventType = Field(..., description='Type of event')
    event_date: datetime = Field(
        ..., description='Date and time when the event occurred', title='Event Date'
    )
    description: Optional[str] = Field(
        None, description='Description of the event', title='Description'
    )
    notes: Optional[str] = Field(
        None, description='Additional notes about the event', title='Notes'
    )
    medication_name: Optional[str] = Field(
        None,
        description='Name of medication (for medication events)',
        title='Medication Name',
    )
    dosage: Optional[str] = Field(
        None, description='Dosage administered', title='Dosage'
    )
    veterinarian: Optional[str] = Field(
        None,
        description='Veterinarian who performed the procedure',
        title='Veterinarian',
    )
    cost: Optional[str] = Field(
        None, description='Cost of the treatment/procedure', title='Cost'
    )
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class EventCreate(BaseModel):
    animal_id: int = Field(
        ..., description='ID of the animal this event relates to', title='Animal Id'
    )
    event_type: EventType = Field(..., description='Type of event')
    event_date: datetime = Field(
        ..., description='Date and time when the event occurred', title='Event Date'
    )
    description: Optional[str] = Field(
        None, description='Description of the event', title='Description'
    )
    notes: Optional[str] = Field(
        None, description='Additional notes about the event', title='Notes'
    )
    medication_name: Optional[str] = Field(
        None,
        description='Name of medication (for medication events)',
        title='Medication Name',
    )
    dosage: Optional[str] = Field(
        None, description='Dosage administered', title='Dosage'
    )
    veterinarian: Optional[str] = Field(
        None,
        description='Veterinarian who performed the procedure',
        title='Veterinarian',
    )
    cost: Optional[str] = Field(
        None, description='Cost of the treatment/procedure', title='Cost'
    )


class ExpenseResponse(BaseModel):
    category: ExpenseCategory
    amount: str = Field(..., title='Amount')
    description: constr(min_length=1) = Field(..., title='Description')
    notes: Optional[str] = Field(None, title='Notes')
    expense_date: datetime = Field(..., title='Expense Date')
    vendor_id: Optional[int] = Field(None, title='Vendor Id')
    id: int = Field(..., title='Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    vendor: Optional[VendorResponse] = None


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class UpdateUserRole(BaseModel):
    role: UserRole


class UserCreate(BaseModel):
    email: EmailStr = Field(..., title='Email')
    name: str = Field(..., title='Name')
    picture: Optional[str] = Field(None, title='Picture')
    role: Optional[UserRole] = 'customer'
    password: str = Field(..., title='Password')


class UserResponse(BaseModel):
    email: EmailStr = Field(..., title='Email')
    name: str = Field(..., title='Name')
    picture: Optional[str] = Field(None, title='Picture')
    role: Optional[UserRole] = 'customer'
    id: int = Field(..., title='Id')
    provider: str = Field(..., title='Provider')
    is_active: bool = Field(..., title='Is Active')
    is_verified: bool = Field(..., title='Is Verified')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AuthResponse(BaseModel):
    user: UserResponse
    token: str = Field(..., title='Token')


class EventBulkCreate(BaseModel):
    events: List[EventCreate] = Field(
        ..., description='List of events to create', title='Events'
    )
