# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-10-03T21:38:13+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Any, List, Optional, Union

from fastapi import FastAPI, UploadFile
from pydantic import conint

from .models import (
    AdminUserResponse,
    Animal,
    AnimalCreate,
    AnimalType,
    AnimalUpdate,
    AnimalWithDetails,
    AnimalWithLocation,
    AuthResponse,
    Event,
    EventBulkCreate,
    EventCreate,
    EventType,
    EventUpdate,
    EventWithAnimal,
    ExpenseCategory,
    ExpenseCreate,
    ExpenseResponse,
    ExpenseUpdate,
    HTTPValidationError,
    Location,
    LocationCreate,
    LocationUpdate,
    LocationWithAnimals,
    Photograph,
    PhotographUpdate,
    PhotographUploadResponse,
    ReceiptResponse,
    ResetUserPassword,
    Token,
    UpdateUserRole,
    UserCreate,
    UserLogin,
    UserResponse,
    VendorCreate,
    VendorResponse,
    VendorUpdate,
)

app = FastAPI(
    title='Flock Tracker API',
    description='\n    ## Flock Tracker API\n\n    A comprehensive API for tracking farm animals, events, and locations.\n\n    ### Features:\n    * **Animal Management**: Track sheep, chickens, and bees with lineage information\n    * **Event Tracking**: Record health events, treatments, breeding, and more\n    * **Location Management**: Manage paddocks and locations with capacity tracking\n    * **Search & Filter**: Powerful search and filtering capabilities\n\n    ### Animal Types:\n    * **Sheep**: Track lineage, health events, and location with gender tracking (ewes/rams)\n    * **Chickens**: Monitor flock health and egg production\n    * **Hives**: Track hive health and honey production\n    ',
    version='1.0.0',
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    response_model=None,
    tags=['Frontend'],
)
def serve_frontend__get() -> None:
    """
    Serve Frontend
    """
    pass


@app.get('/api', response_model=Any, tags=['API Info'])
def api_info_api_get() -> Any:
    """
    Api Info
    """
    pass


@app.get(
    '/api/admin/users',
    response_model=List[AdminUserResponse],
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def list_users_api_admin_users_get(
    skip: Optional[int] = 0, limit: Optional[int] = 100
) -> Union[List[AdminUserResponse], HTTPValidationError]:
    """
    List Users
    """
    pass


@app.get(
    '/api/admin/users/{user_id}',
    response_model=AdminUserResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def get_user_api_admin_users__user_id__get(
    user_id: int,
) -> Union[AdminUserResponse, HTTPValidationError]:
    """
    Get User
    """
    pass


@app.patch(
    '/api/admin/users/{user_id}/activate',
    response_model=AdminUserResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def activate_user_api_admin_users__user_id__activate_patch(
    user_id: int,
) -> Union[AdminUserResponse, HTTPValidationError]:
    """
    Activate User
    """
    pass


@app.patch(
    '/api/admin/users/{user_id}/deactivate',
    response_model=AdminUserResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def deactivate_user_api_admin_users__user_id__deactivate_patch(
    user_id: int,
) -> Union[AdminUserResponse, HTTPValidationError]:
    """
    Deactivate User
    """
    pass


@app.post(
    '/api/admin/users/{user_id}/reset-password',
    response_model=AdminUserResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def reset_user_password_api_admin_users__user_id__reset_password_post(
    user_id: int, body: ResetUserPassword = ...
) -> Union[AdminUserResponse, HTTPValidationError]:
    """
    Reset User Password
    """
    pass


@app.patch(
    '/api/admin/users/{user_id}/role',
    response_model=AdminUserResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['admin'],
)
def update_user_role_api_admin_users__user_id__role_patch(
    user_id: int, body: UpdateUserRole = ...
) -> Union[AdminUserResponse, HTTPValidationError]:
    """
    Update User Role
    """
    pass


@app.get(
    '/api/animals',
    response_model=List[AnimalWithDetails],
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def read_animals_api_animals_get(
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=1, le=1000)] = 100,
    animal_type: Optional[AnimalType] = None,
    location_id: Optional[int] = None,
) -> Union[List[AnimalWithDetails], HTTPValidationError]:
    """
    Read Animals
    """
    pass


@app.post(
    '/api/animals',
    response_model=Animal,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def create_animal_api_animals_post(
    body: AnimalCreate,
) -> Union[Animal, HTTPValidationError]:
    """
    Create Animal
    """
    pass


@app.get(
    '/api/animals/search',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def search_animals_api_animals_search_get(q: str) -> Union[Any, HTTPValidationError]:
    """
    Search Animals
    """
    pass


@app.get(
    '/api/animals/tag/{tag_number}',
    response_model=AnimalWithLocation,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def read_animal_by_tag_api_animals_tag__tag_number__get(
    tag_number: str,
) -> Union[AnimalWithLocation, HTTPValidationError]:
    """
    Read Animal By Tag
    """
    pass


@app.get(
    '/api/animals/type/{animal_type}',
    response_model=List[Animal],
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def get_animals_by_type_api_animals_type__animal_type__get(
    animal_type: AnimalType,
) -> Union[List[Animal], HTTPValidationError]:
    """
    Get Animals By Type
    """
    pass


@app.get(
    '/api/animals/{animal_id}',
    response_model=AnimalWithDetails,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def read_animal_api_animals__animal_id__get(
    animal_id: int,
) -> Union[AnimalWithDetails, HTTPValidationError]:
    """
    Read Animal
    """
    pass


@app.put(
    '/api/animals/{animal_id}',
    response_model=Animal,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def update_animal_api_animals__animal_id__put(
    animal_id: int, body: AnimalUpdate = ...
) -> Union[Animal, HTTPValidationError]:
    """
    Update Animal
    """
    pass


@app.delete(
    '/api/animals/{animal_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def delete_animal_api_animals__animal_id__delete(
    animal_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Animal
    """
    pass


@app.post(
    '/api/animals/{animal_id}/move',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def move_animal_to_location_api_animals__animal_id__move_post(
    animal_id: int, location_id: int = ...
) -> Union[Any, HTTPValidationError]:
    """
    Move Animal To Location
    """
    pass


@app.get(
    '/api/animals/{animal_id}/offspring',
    response_model=List[Animal],
    responses={'422': {'model': HTTPValidationError}},
    tags=['animals'],
)
def get_animal_offspring_api_animals__animal_id__offspring_get(
    animal_id: int,
) -> Union[List[Animal], HTTPValidationError]:
    """
    Get Animal Offspring
    """
    pass


@app.post(
    '/api/auth/login',
    response_model=AuthResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['authentication'],
)
def login_api_auth_login_post(
    body: UserLogin,
) -> Union[AuthResponse, HTTPValidationError]:
    """
    Login
    """
    pass


@app.get('/api/auth/me', response_model=UserResponse, tags=['authentication'])
def read_users_me_api_auth_me_get() -> UserResponse:
    """
    Read Users Me
    """
    pass


@app.post(
    '/api/auth/register',
    response_model=AuthResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['authentication'],
)
def register_api_auth_register_post(
    body: UserCreate,
) -> Union[AuthResponse, HTTPValidationError]:
    """
    Register
    """
    pass


@app.post(
    '/api/auth/token',
    response_model=Token,
    responses={'422': {'model': HTTPValidationError}},
    tags=['authentication'],
)
def login_for_access_token_api_auth_token_post(
    body: UserLogin,
) -> Union[Token, HTTPValidationError]:
    """
    Login For Access Token
    """
    pass


@app.get(
    '/api/events',
    response_model=List[EventWithAnimal],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def read_events_api_events_get(
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=1, le=1000)] = 100,
    animal_id: Optional[int] = None,
    event_type: Optional[EventType] = None,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None,
) -> Union[List[EventWithAnimal], HTTPValidationError]:
    """
    Read Events
    """
    pass


@app.post(
    '/api/events',
    response_model=Event,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def create_event_api_events_post(
    body: EventCreate,
) -> Union[Event, HTTPValidationError]:
    """
    Create Event
    """
    pass


@app.get(
    '/api/events/animal/{animal_id}',
    response_model=List[Event],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def read_events_by_animal_api_events_animal__animal_id__get(
    animal_id: int,
) -> Union[List[Event], HTTPValidationError]:
    """
    Read Events By Animal
    """
    pass


@app.get(
    '/api/events/animal/{animal_id}/health',
    response_model=List[Event],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def get_animal_health_events_api_events_animal__animal_id__health_get(
    animal_id: int,
) -> Union[List[Event], HTTPValidationError]:
    """
    Get Animal Health Events
    """
    pass


@app.get(
    '/api/events/animal/{animal_id}/medication',
    response_model=List[Event],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def get_animal_medication_history_api_events_animal__animal_id__medication_get(
    animal_id: int,
) -> Union[List[Event], HTTPValidationError]:
    """
    Get Animal Medication History
    """
    pass


@app.post(
    '/api/events/bulk',
    response_model=List[Event],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def create_bulk_events_api_events_bulk_post(
    body: EventBulkCreate,
) -> Union[List[Event], HTTPValidationError]:
    """
    Create Bulk Events
    """
    pass


@app.get(
    '/api/events/recent',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def get_recent_events_api_events_recent_get(
    days: Optional[conint(ge=1, le=365)] = 7
) -> Union[Any, HTTPValidationError]:
    """
    Get Recent Events
    """
    pass


@app.get(
    '/api/events/search',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def search_events_api_events_search_get(q: str) -> Union[Any, HTTPValidationError]:
    """
    Search Events
    """
    pass


@app.get(
    '/api/events/type/{event_type}',
    response_model=List[EventWithAnimal],
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def get_events_by_type_api_events_type__event_type__get(
    event_type: EventType,
) -> Union[List[EventWithAnimal], HTTPValidationError]:
    """
    Get Events By Type
    """
    pass


@app.get('/api/events/upcoming', response_model=Any, tags=['events'])
def get_upcoming_events_api_events_upcoming_get() -> Any:
    """
    Get Upcoming Events
    """
    pass


@app.get(
    '/api/events/{event_id}',
    response_model=EventWithAnimal,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def read_event_api_events__event_id__get(
    event_id: int,
) -> Union[EventWithAnimal, HTTPValidationError]:
    """
    Read Event
    """
    pass


@app.put(
    '/api/events/{event_id}',
    response_model=Event,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def update_event_api_events__event_id__put(
    event_id: int, body: EventUpdate = ...
) -> Union[Event, HTTPValidationError]:
    """
    Update Event
    """
    pass


@app.delete(
    '/api/events/{event_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['events'],
)
def delete_event_api_events__event_id__delete(
    event_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Event
    """
    pass


@app.get(
    '/api/expenses',
    response_model=List[ExpenseResponse],
    responses={'422': {'model': HTTPValidationError}},
    tags=['expenses'],
)
def list_expenses_api_expenses_get(
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=1, le=1000)] = 100,
    category: Optional[ExpenseCategory] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    vendor: Optional[str] = None,
) -> Union[List[ExpenseResponse], HTTPValidationError]:
    """
    List Expenses
    """
    pass


@app.post(
    '/api/expenses',
    response_model=ExpenseResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['expenses'],
)
def create_expense_api_expenses_post(
    body: ExpenseCreate,
) -> Union[ExpenseResponse, HTTPValidationError]:
    """
    Create Expense
    """
    pass


@app.get(
    '/api/expenses/{expense_id}',
    response_model=ExpenseResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['expenses'],
)
def get_expense_api_expenses__expense_id__get(
    expense_id: int,
) -> Union[ExpenseResponse, HTTPValidationError]:
    """
    Get Expense
    """
    pass


@app.put(
    '/api/expenses/{expense_id}',
    response_model=ExpenseResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['expenses'],
)
def update_expense_api_expenses__expense_id__put(
    expense_id: int, body: ExpenseUpdate = ...
) -> Union[ExpenseResponse, HTTPValidationError]:
    """
    Update Expense
    """
    pass


@app.delete(
    '/api/expenses/{expense_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['expenses'],
)
def delete_expense_api_expenses__expense_id__delete(
    expense_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Expense
    """
    pass


@app.get(
    '/api/locations',
    response_model=List[Location],
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def read_locations_api_locations_get(
    skip: Optional[conint(ge=0)] = 0, limit: Optional[conint(ge=1, le=1000)] = 100
) -> Union[List[Location], HTTPValidationError]:
    """
    Read Locations
    """
    pass


@app.post(
    '/api/locations',
    response_model=Location,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def create_location_api_locations_post(
    body: LocationCreate,
) -> Union[Location, HTTPValidationError]:
    """
    Create Location
    """
    pass


@app.get(
    '/api/locations/available',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def get_available_locations_api_locations_available_get(
    minimum_space: Optional[conint(ge=1)] = 1,
) -> Union[Any, HTTPValidationError]:
    """
    Get Available Locations
    """
    pass


@app.post(
    '/api/locations/move-animals',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def move_animals_between_locations_api_locations_move_animals_post(
    from_location_id: int, to_location_id: int = ..., body: List[int] = ...
) -> Union[Any, HTTPValidationError]:
    """
    Move Animals Between Locations
    """
    pass


@app.get('/api/locations/occupancy', response_model=Any, tags=['locations'])
def get_locations_occupancy_api_locations_occupancy_get() -> Any:
    """
    Get Locations Occupancy
    """
    pass


@app.get(
    '/api/locations/search',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def search_locations_api_locations_search_get(
    q: str,
) -> Union[Any, HTTPValidationError]:
    """
    Search Locations
    """
    pass


@app.get(
    '/api/locations/{location_id}',
    response_model=LocationWithAnimals,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def read_location_api_locations__location_id__get(
    location_id: int,
) -> Union[LocationWithAnimals, HTTPValidationError]:
    """
    Read Location
    """
    pass


@app.put(
    '/api/locations/{location_id}',
    response_model=Location,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def update_location_api_locations__location_id__put(
    location_id: int, body: LocationUpdate = ...
) -> Union[Location, HTTPValidationError]:
    """
    Update Location
    """
    pass


@app.delete(
    '/api/locations/{location_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def delete_location_api_locations__location_id__delete(
    location_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Location
    """
    pass


@app.get(
    '/api/locations/{location_id}/animals',
    response_model=List[Animal],
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def get_animals_at_location_api_locations__location_id__animals_get(
    location_id: int,
) -> Union[List[Animal], HTTPValidationError]:
    """
    Get Animals At Location
    """
    pass


@app.get(
    '/api/locations/{location_id}/occupancy',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['locations'],
)
def get_location_occupancy_api_locations__location_id__occupancy_get(
    location_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Get Location Occupancy
    """
    pass


@app.get(
    '/api/photographs/animal/{animal_id}',
    response_model=List[Photograph],
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def get_animal_photographs_api_photographs_animal__animal_id__get(
    animal_id: int,
) -> Union[List[Photograph], HTTPValidationError]:
    """
    Get Animal Photographs
    """
    pass


@app.post(
    '/api/photographs/upload/{animal_id}',
    response_model=PhotographUploadResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def upload_photograph_api_photographs_upload__animal_id__post(
    animal_id: int, file: UploadFile = ...
) -> Union[PhotographUploadResponse, HTTPValidationError]:
    """
    Upload Photograph
    """
    pass


@app.get(
    '/api/photographs/{photograph_id}',
    response_model=Photograph,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def get_photograph_api_photographs__photograph_id__get(
    photograph_id: int,
) -> Union[Photograph, HTTPValidationError]:
    """
    Get Photograph
    """
    pass


@app.put(
    '/api/photographs/{photograph_id}',
    response_model=Photograph,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def update_photograph_api_photographs__photograph_id__put(
    photograph_id: int, body: PhotographUpdate = ...
) -> Union[Photograph, HTTPValidationError]:
    """
    Update Photograph
    """
    pass


@app.delete(
    '/api/photographs/{photograph_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def delete_photograph_api_photographs__photograph_id__delete(
    photograph_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Photograph
    """
    pass


@app.get(
    '/api/photographs/{photograph_id}/file',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def get_photograph_file_api_photographs__photograph_id__file_get(
    photograph_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Get Photograph File
    """
    pass


@app.post(
    '/api/photographs/{photograph_id}/set-primary',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['photographs'],
)
def set_primary_photograph_api_photographs__photograph_id__set_primary_post(
    photograph_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Set Primary Photograph
    """
    pass


@app.get(
    '/api/receipts/',
    response_model=List[ReceiptResponse],
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def get_receipts_api_receipts__get(
    skip: Optional[int] = 0, limit: Optional[int] = 100
) -> Union[List[ReceiptResponse], HTTPValidationError]:
    """
    Get Receipts
    """
    pass


@app.get(
    '/api/receipts/task/{task_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def get_task_status_api_receipts_task__task_id__get(
    task_id: str,
) -> Union[Any, HTTPValidationError]:
    """
    Get Task Status
    """
    pass


@app.post(
    '/api/receipts/upload',
    response_model=ReceiptResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def upload_receipt_api_receipts_upload_post(
    file: UploadFile,
) -> Union[ReceiptResponse, HTTPValidationError]:
    """
    Upload Receipt
    """
    pass


@app.get(
    '/api/receipts/{receipt_id}',
    response_model=ReceiptResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def get_receipt_api_receipts__receipt_id__get(
    receipt_id: int,
) -> Union[ReceiptResponse, HTTPValidationError]:
    """
    Get Receipt
    """
    pass


@app.delete(
    '/api/receipts/{receipt_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def delete_receipt_api_receipts__receipt_id__delete(
    receipt_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Receipt
    """
    pass


@app.post(
    '/api/receipts/{receipt_id}/process',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['receipts'],
)
def process_receipt_api_receipts__receipt_id__process_post(
    receipt_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Process Receipt
    """
    pass


@app.get(
    '/api/vendors',
    response_model=List[VendorResponse],
    responses={'422': {'model': HTTPValidationError}},
    tags=['vendors'],
)
def list_vendors_api_vendors_get(
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=1, le=1000)] = 100,
    search: Optional[str] = None,
) -> Union[List[VendorResponse], HTTPValidationError]:
    """
    List Vendors
    """
    pass


@app.post(
    '/api/vendors',
    response_model=VendorResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['vendors'],
)
def create_vendor_api_vendors_post(
    body: VendorCreate,
) -> Union[VendorResponse, HTTPValidationError]:
    """
    Create Vendor
    """
    pass


@app.get(
    '/api/vendors/{vendor_id}',
    response_model=VendorResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['vendors'],
)
def get_vendor_api_vendors__vendor_id__get(
    vendor_id: int,
) -> Union[VendorResponse, HTTPValidationError]:
    """
    Get Vendor
    """
    pass


@app.put(
    '/api/vendors/{vendor_id}',
    response_model=VendorResponse,
    responses={'422': {'model': HTTPValidationError}},
    tags=['vendors'],
)
def update_vendor_api_vendors__vendor_id__put(
    vendor_id: int, body: VendorUpdate = ...
) -> Union[VendorResponse, HTTPValidationError]:
    """
    Update Vendor
    """
    pass


@app.delete(
    '/api/vendors/{vendor_id}',
    response_model=Any,
    responses={'422': {'model': HTTPValidationError}},
    tags=['vendors'],
)
def delete_vendor_api_vendors__vendor_id__delete(
    vendor_id: int,
) -> Union[Any, HTTPValidationError]:
    """
    Delete Vendor
    """
    pass


@app.get('/health', response_model=Any, tags=['Health'])
def health_check_health_get() -> Any:
    """
    Health Check
    """
    pass


@app.get(
    '/{full_path}',
    response_model=None,
    responses={'422': {'model': HTTPValidationError}},
    tags=['Frontend'],
)
def serve_spa__full_path__get(full_path: str) -> Optional[HTTPValidationError]:
    """
    Serve Spa
    """
    pass
